{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SeqCluPV - Real-time sequence clustering using prototype voting Explore the docs \u00bb Report bug \u00b7 Request feature Table of contents About the project Built with Getting started Prerequisites Installation Usage Roadmap Contributing License Contact Acknowledgements About the project This project, called SeqCluPV is an extension of the original SeqClu algorithm, developed by Dr.ir. Sicco Verwer of the Delft University of Technology , that is characterized by voting for cluster prototypes. The framework has been developed as part of the course CSE3000 Research Project at the Delft University of Technology . For instructions on how to get a local copy up and running, please refer to the Getting started section. Built with NumPy FastDTW SciPy Pandas Scikit-learn Seaborn Matplotlib Getting started To get a local copy up and running follow these simple steps. Prerequisites The project was made with Python 3.9, hence having Python 3.9 installed is a prerequisite. Installation from PyPI Install Cython pip install Cython Clone the sktime repository in a separate directory git clone https://github.com/alan-turing-institute/sktime.git After navigating to the sktime project root, install sktime python setup.py install Install SeqCluPV pip install seqclupv Installation from source Clone the repo git clone https://github.com/rtewierik/seqclupv.git Install Cython pip install Cython Clone the sktime repository in a separate directory git clone https://github.com/alan-turing-institute/sktime.git After navigating to the sktime project root, install sktime python setup.py install After navigating to the SeqCluPV project root, install SeqCluPV python setup.py install Usage The algorithm can be run on three data sets, which are the following. GesturePebbleZ1 (http://www.timeseriesclassification.com/description.php?Dataset=GesturePebbleZ1) UJI Pen Characters (https://archive.ics.uci.edu/ml/datasets/UJI+Pen+Characters) PLAID (http://www.timeseriesclassification.com/description.php?Dataset=PLAID) The command-line interface can be used as follows. python -m seqclupv numPrototypes numRepresentativePrototypes maxPerTick dataSourceParameters seqCluParameters maxIter online onlySeqClu experimentName The potential values for the above parameters are as follows. numPrototypes: integer - The number of prototypes that will be used by all variants of the algorithm. numRepresentativePrototypes: integer - The number of representative prototypes that will be used by all variants of the algorithm. maxPerTick: integer - The maximum amount of sequences that can be processed per tick. dataSourceParameters: list[character] or list[boolean,string] - The two data sources that can be used are the handwritten character data source and the data source for the data sets from TimeSeriesClassification.com . For the handwritten character data source, this parameter is a JSON-formatted list of characters, where you can choose from the characters ['C', 'U', 'V', 'W', 'S', 'O', '1', '2', '3', '5', '6', '8', '9'] . For the data sets from TimeSeriesClassification.com , this parameter is a list with two items, namely a boolean and a string in that order. The boolean value indicates whether or not the pair-wise distances between all items in the data set should be computed upfront, the string represents the name of the data set that is used. This string can be either of [\\\"pebble\\\",\\\"plaid\\\"] . NOTE: Since the list is JSON-formatted, the boolean values should be either true or false . Moreover, spaces are NOT allowed. seqCluParameters: list[integer, float, float, boolean, boolean] - The values in the list represent the following parameters in that order. bufferSize: integer - The maximum size of the buffer. minimumRepresentativeness: - float - The minimum average representativeness that prototypes should have in order for the distance computation from a sequence to the cluster that the prototypes represent to be approximated. prototypeValueratio: - float - The value 'a' in a:1 where a:1 is the ratio between the representativeness and the weight. This ratio is used to compute the value of a prototype as a linear combination of the representativeness and the weight of the prototype. clusterAssignment: - boolean - A boolean value indicating whether or not to approximate the distance to the cluster. NOTE: Since the list is JSON-formatted, the boolean values should be either true or false . Moreover, spaces are NOT allowed. buffering: - boolean - A boolean value indicating whether or not the buffering feature should be used. NOTE: Since the list is JSON-formatted, the boolean values should be either true or false . Moreover, spaces are NOT allowed. maxIter: integer - The maximum number of iterations that the offline baseline variant of the algorithm is allowed to execute. NOTE: This parameter is only needed when online and onlySeqClu are set to False , in other cases any integer is fine and the input will be ignored. online: boolean - A boolean value that will result in executing the online baseline variant of the SeqClu algorithm if set to true and the offline baseline variant of the algorithm if set to false. NOTE: Only the values 'True' or 'False' are possible here. onlySeqClu: boolean - A boolean value indicating whether or not only the SeqClu algorithm should be executed. NOTE: Only the values 'True' or 'False' are possible here. experimentName: string - The name of the experiment. This is used to compare the prototypes at the end of executing (online baseline variant of) the SeqClu algorithm. The possible values can be o29 , o295w and pebbleFull . A few examples of commands that are executed to run specific experiments are as follows. Experiment with characters O, 2 and 9 of handwritten character data set using both the SeqClu algorithm and the online baseline variant of the SeqClu algorithm python -m seqclupv 8 3 1 [\\\"O\\\",\\\"2\\\",\\\"9\\\"] [15,0.5,2.0,false,true] 0 True True o29 Experiment with Pebble data set using just the SeqClu algorithm python -m seqclupv 8 3 1 [false,\\\"pebble\\\"] [15,0.5,3.0,true,false] 0 True True pebbleFull Roadmap See the open issues for a list of proposed features (and known issues). Contributing Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated . Fork the project Create your feature branch ( git checkout -b feature/AmazingFeature ) Commit your changes ( git commit -m 'Add some AmazingFeature' ) Push to the branch ( git push origin feature/AmazingFeature ) Open a pull request License Distributed under the MIT License. See LICENSE for more information. Contact R.E.C. te Wierik - rtewierik64@gmail.com Project link: https://github.com/rtewierik/seqclupv Acknowledgements README template","title":"Home"},{"location":"#about-the-project","text":"This project, called SeqCluPV is an extension of the original SeqClu algorithm, developed by Dr.ir. Sicco Verwer of the Delft University of Technology , that is characterized by voting for cluster prototypes. The framework has been developed as part of the course CSE3000 Research Project at the Delft University of Technology . For instructions on how to get a local copy up and running, please refer to the Getting started section.","title":"About the project"},{"location":"#built-with","text":"NumPy FastDTW SciPy Pandas Scikit-learn Seaborn Matplotlib","title":"Built with"},{"location":"#getting-started","text":"To get a local copy up and running follow these simple steps.","title":"Getting started"},{"location":"#prerequisites","text":"The project was made with Python 3.9, hence having Python 3.9 installed is a prerequisite.","title":"Prerequisites"},{"location":"#installation-from-pypi","text":"Install Cython pip install Cython Clone the sktime repository in a separate directory git clone https://github.com/alan-turing-institute/sktime.git After navigating to the sktime project root, install sktime python setup.py install Install SeqCluPV pip install seqclupv","title":"Installation from PyPI"},{"location":"#installation-from-source","text":"Clone the repo git clone https://github.com/rtewierik/seqclupv.git Install Cython pip install Cython Clone the sktime repository in a separate directory git clone https://github.com/alan-turing-institute/sktime.git After navigating to the sktime project root, install sktime python setup.py install After navigating to the SeqCluPV project root, install SeqCluPV python setup.py install","title":"Installation from source"},{"location":"#usage","text":"The algorithm can be run on three data sets, which are the following. GesturePebbleZ1 (http://www.timeseriesclassification.com/description.php?Dataset=GesturePebbleZ1) UJI Pen Characters (https://archive.ics.uci.edu/ml/datasets/UJI+Pen+Characters) PLAID (http://www.timeseriesclassification.com/description.php?Dataset=PLAID) The command-line interface can be used as follows. python -m seqclupv numPrototypes numRepresentativePrototypes maxPerTick dataSourceParameters seqCluParameters maxIter online onlySeqClu experimentName The potential values for the above parameters are as follows. numPrototypes: integer - The number of prototypes that will be used by all variants of the algorithm. numRepresentativePrototypes: integer - The number of representative prototypes that will be used by all variants of the algorithm. maxPerTick: integer - The maximum amount of sequences that can be processed per tick. dataSourceParameters: list[character] or list[boolean,string] - The two data sources that can be used are the handwritten character data source and the data source for the data sets from TimeSeriesClassification.com . For the handwritten character data source, this parameter is a JSON-formatted list of characters, where you can choose from the characters ['C', 'U', 'V', 'W', 'S', 'O', '1', '2', '3', '5', '6', '8', '9'] . For the data sets from TimeSeriesClassification.com , this parameter is a list with two items, namely a boolean and a string in that order. The boolean value indicates whether or not the pair-wise distances between all items in the data set should be computed upfront, the string represents the name of the data set that is used. This string can be either of [\\\"pebble\\\",\\\"plaid\\\"] . NOTE: Since the list is JSON-formatted, the boolean values should be either true or false . Moreover, spaces are NOT allowed. seqCluParameters: list[integer, float, float, boolean, boolean] - The values in the list represent the following parameters in that order. bufferSize: integer - The maximum size of the buffer. minimumRepresentativeness: - float - The minimum average representativeness that prototypes should have in order for the distance computation from a sequence to the cluster that the prototypes represent to be approximated. prototypeValueratio: - float - The value 'a' in a:1 where a:1 is the ratio between the representativeness and the weight. This ratio is used to compute the value of a prototype as a linear combination of the representativeness and the weight of the prototype. clusterAssignment: - boolean - A boolean value indicating whether or not to approximate the distance to the cluster. NOTE: Since the list is JSON-formatted, the boolean values should be either true or false . Moreover, spaces are NOT allowed. buffering: - boolean - A boolean value indicating whether or not the buffering feature should be used. NOTE: Since the list is JSON-formatted, the boolean values should be either true or false . Moreover, spaces are NOT allowed. maxIter: integer - The maximum number of iterations that the offline baseline variant of the algorithm is allowed to execute. NOTE: This parameter is only needed when online and onlySeqClu are set to False , in other cases any integer is fine and the input will be ignored. online: boolean - A boolean value that will result in executing the online baseline variant of the SeqClu algorithm if set to true and the offline baseline variant of the algorithm if set to false. NOTE: Only the values 'True' or 'False' are possible here. onlySeqClu: boolean - A boolean value indicating whether or not only the SeqClu algorithm should be executed. NOTE: Only the values 'True' or 'False' are possible here. experimentName: string - The name of the experiment. This is used to compare the prototypes at the end of executing (online baseline variant of) the SeqClu algorithm. The possible values can be o29 , o295w and pebbleFull . A few examples of commands that are executed to run specific experiments are as follows. Experiment with characters O, 2 and 9 of handwritten character data set using both the SeqClu algorithm and the online baseline variant of the SeqClu algorithm python -m seqclupv 8 3 1 [\\\"O\\\",\\\"2\\\",\\\"9\\\"] [15,0.5,2.0,false,true] 0 True True o29 Experiment with Pebble data set using just the SeqClu algorithm python -m seqclupv 8 3 1 [false,\\\"pebble\\\"] [15,0.5,3.0,true,false] 0 True True pebbleFull","title":"Usage"},{"location":"#roadmap","text":"See the open issues for a list of proposed features (and known issues).","title":"Roadmap"},{"location":"#contributing","text":"Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are greatly appreciated . Fork the project Create your feature branch ( git checkout -b feature/AmazingFeature ) Commit your changes ( git commit -m 'Add some AmazingFeature' ) Push to the branch ( git push origin feature/AmazingFeature ) Open a pull request","title":"Contributing"},{"location":"#license","text":"Distributed under the MIT License. See LICENSE for more information.","title":"License"},{"location":"#contact","text":"R.E.C. te Wierik - rtewierik64@gmail.com Project link: https://github.com/rtewierik/seqclupv","title":"Contact"},{"location":"#acknowledgements","text":"README template","title":"Acknowledgements"},{"location":"api-documentation/","text":"seqclupv This package is the top-level package of 'SeqClu'. seqclupv.data This package contains three data sets, namely: 1. GesturePebbleZ1 (http://www.timeseriesclassification.com/description.php?Dataset=GesturePebbleZ1) 2. UJI Pen Characters (https://archive.ics.uci.edu/ml/datasets/UJI+Pen+Characters) 3. PLAID (http://www.timeseriesclassification.com/description.php?Dataset=PLAID) Additionally, the package contains the original source code provided at the start of the project as a Jupyter Notebook. seqclupv.library This package contains all source code that is used in the variants of the 'SeqClu' algorithm that are contained in this framework. seqclupv.library.data_generator This package contains all implementations of data generators that are used to generate data that are passed into the 'SeqClu' algorithm. seqclupv.library.data_generator.handwritten_character_generator This module contains a class that is responsible for generating handwritten character data that are passed to the 'SeqClu' algorithm. Link to the 'UJI Pen Character' data set https://archive.ics.uci.edu/ml/datasets/UJI+Pen+Characters NOTE: The characters that are contained in the data set are as follows. ['C', 'U', 'V', 'W', 'S', 'O', '1', '2', '3', '5', '6', '8', '9'] parseFile parseFile(lines: List[str]) -> Dict[str, List[Tuple[int, int]]] This method parses a file containing a data set of sequences. The lines in this file are processed in the method to obtain a dictionary in which the keys represent the name of some class and the values represent a list of sequences that belong to this class. Arguments : lines : The lines that are present in some file containing a data set of sequences. Returns : A dictionary in which the keys represent the name of some class and the values represent a list of sequences that belong to this class. HandwrittenCharacterGenerator Objects class HandwrittenCharacterGenerator(IDataGenerator) __init__ | __init__(classes: List[chr], numPrototypes: int) -> None This method initializes the data generator with a given list of classes that the generated data set should contain. Arguments : classes : The classes that are present in the data set as a list of characters. numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. Returns : void generateData | generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. seqclupv.library.data_generator.pebble_generator This module contains a class that is responsible for generating gesture pebble data that are passed to the 'SeqClu' algorithm. Link to the 'GesturePebbleZ1' data set http://www.timeseriesclassification.com/description.php?Dataset=GesturePebbleZ1 GesturePebbleGenerator Objects class GesturePebbleGenerator(TimeSeriesClassificationBase) __init__ | __init__(numPrototypes: int, computeDistances: bool) -> None This method initializes the data generator given the number of prototypes and a boolean value indicating whether or not the pair-wise distances between all items in the data set need to be computed. This data generator is applicable to the 'GesturePebbleZ1' data set. Arguments : numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. computeDistances : A boolean value indicating whether or not the pair-wise distances between all items in the data set. generateData | generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. seqclupv.library.data_generator.plaid_generator This module contains a class that is responsible for generating PLAID data that are passed to the 'SeqClu' algorithm. Link to the 'PLAID' data set http://www.timeseriesclassification.com/description.php?Dataset=PLAID PLAIDGenerator Objects class PLAIDGenerator(TimeSeriesClassificationBase) __init__ | __init__(numPrototypes: int, computeDistances: bool) -> None This method initializes the data generator given the number of prototypes and a boolean value indicating whether or not the pair-wise distances between all items in the data set need to be computed. This data generator is applicable to the 'GesturePebbleZ1' data set. Arguments : numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. computeDistances : A boolean value indicating whether or not the pair-wise distances between all items in the data set. generateData | generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. seqclupv.library.data_generator.sine_curve_generator This module contains a class that is responsible for generating data from a sine curve that are passed to the 'SeqClu' algorithm. CurveGenerator Objects class CurveGenerator(IDataGenerator) error | @property | error() -> float This property stores the error factor that is used to add noise to the sine curve with a random number generator. Returns : A float representing the error factor. freq | @property | freq() -> Tuple[float, float] This property stores the lower and upper bound used to draw a sample from a uniform distribution that will be used as the frequency. Returns : Two floats representing the lower and upper bound used to draw a sample from a uniform distribution that will be used as the frequency. n | @property | n() -> int This property stores the number of sequences that should be generated. Returns : An integer that represents the number of sequences that should be generated. phase | @property | phase() -> int This property stores the phase that is used to generate the sine curve. Returns : An integer that represents the phase that is used to generate the sine curve. samplingRate | @property | samplingRate() -> int Defines how the rate at which samples are generated. The higher the value, the fewer samples are generated. Returns : An integer representing the rate at which samples are generated. __init__ | __init__(n: int, freq: Tuple[float, float], samplingRate: int, error: float, phase: int) -> None This method initializes the data generator that is applicable to the sine curve data set with the parameters that are required to generate the data set. Arguments : n : The amount of samples that are generated. freq : The lower and upper bound of the distribution that generates the frequency of a sample. samplingRate : The rate at which samples are generated. error : The error factor used to add noise to samples. phase : The phase that is used to generate the sine curve. generateData | generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. seqclupv.library.data_generator.time_series_classification_base This module contains a base class that is responsible for generating time series data from https://www.timeseriesclassification.com that are passed to the 'SeqClu' algorithm. TimeSeriesClassificationBase Objects class TimeSeriesClassificationBase(IDataGenerator, ABC) loadData | @staticmethod | loadData(path: str, filenames: List[str]) -> Tuple[List[ndarray], List[str]] This method loads the data from a given path to some directory and file name. Arguments : path : The path to some directory, relative to the current working directory. filenames : The names of the files that should be loaded. Returns : The data that was loaded from all of the files. computeDistances | @property | computeDistances() -> bool This property stores a boolean value indicating whether or not the pair-wise distances between items in the data set should be computed. Returns : A boolean value indicating whether or not the pair-wise distances between items in the data set should be computed. __init__ | __init__(numPrototypes: int, computeDistances: bool) -> None This method initializes the data generator given the number of prototypes that are drawn from the data set and a boolean value indicating whether or not the pair-wise distances between items in the data set should be computed. Arguments : numPrototypes : The number of prototypes that should be drawn from the data set. computeDistances : A boolean value indicating whether or not the pair-wise distances between items in the data set should be computed. seqclupv.library.data_source This package contains all implementations of data sources that are used by the 'SeqClu' algorithm to request data at every tick. seqclupv.library.data_source.fake_data_source This module contains an implementation of a fake data source that feeds a random number of elements of a predefined data set to the 'SeqClu' algorithm at every tick. FakeDataSource Objects class FakeDataSource(IFakeDataSource, IDataGenerator) combineGeneratedData | @staticmethod | combineGeneratedData(clusters: List[List[Union[ndarray, list]]], classes: List[Union[int, chr]], numPrototypes: int) -> tuple This method combines the data that were generated from multiple data sources into one data stream. Arguments : clusters : The logical clusters with all the different classes for all the data generators. classes : All the classes that should be present in the data provided by the data source. numPrototypes : The number of prototypes used in the 'SeqClu' algorithm. Returns : The class dictionary, indices, labels and pair-wise distances of the data, as well as the data itself actualLabels | @property | actualLabels() -> Optional[Dict[str, Union[chr, int]]] This property stores the correct labels of the data in the data source. Returns : The correct labels of the data in the data set. classes | @property | classes() -> List[Union[chr, int]] This property stores all the classes that are present in the data source. Returns : All the classes that are present in the data set. currentIndex | @property | currentIndex() -> int This property stores the current index of the data provided by the data source. Returns : An integer representing the current index of the data provided by the data source. currentTick | @property | currentTick() -> int This property stores the current tick of the algorithm. Returns : An integer representing the current tick of the algorithm. data | @property | data() -> List[Union[ndarray, list]] This property stores the data provided by the data source. Returns : The data provided by the data source. dataSize | @property | dataSize() -> Optional[int] This property stores the amount of data that are provided by the data source. Returns : An integer representing the amount of data that are provided by the data source. dataGenerators | @property | dataGenerators() -> List[IDataGenerator] This property stores the data generators that are used to generate the data provided by the data source. Returns : A list of data generators that are used to generate the data provided by the data source. maxPerTick | @property | maxPerTick() -> int This property stores the maximum number of data that can be provided by the data source per tick. Returns : An integer representing the maximum number of data that can be provided by the data source per tick. numClasses | @property | numClasses() -> int The number of classes that are present in the data provided by the data source. Returns : An integer representing the number of classes that are present in the data provided by the data source. numPrototypes | @property | numPrototypes() -> int The number of prototypes that are used in the 'SeqClu' algorithm. Returns : An integer representing the number of prototypes that are used in the 'SeqClu' algorithm. currentIndex | @currentIndex.setter | currentIndex(value: int) -> None This is the setter for the 'currentIndex' property. Arguments : value : The value that the 'currentIndex' property needs to be set to. Returns : void data | @data.setter | data(value: ndarray) -> None This is the setter for the 'data' property. Arguments : value : The value that the 'data' property needs to be set to. Returns : void __init__ | __init__(maxPerTick: int, dataGenerators: List[IDataGenerator], numPrototypes: int, classes: List[Union[chr, int]]) -> None This method initializes the data source given the maximum number of data per tick, the data generators that should be used to generate the data provided by the data source and the number of prototypes that is used in the 'SeqClu' algorithm. Arguments : maxPerTick : The maximum number of data that can be provided by the data source per tick. dataGenerators : The data generators that should be used to generate the data provided by the data source. numPrototypes : The number of prototypes that is used in the 'SeqClu' algorithm. classes : All the classes that should be present in the data provided by the data source. advanceTick | advanceTick() -> List[Union[ndarray, list]] This method advances the state of the data source by one tick. The method returns a list of sequences that should be processed by the 'SeqClu' algorithm during the next tick. Returns : A list of sequences that should be processed by the 'SeqClu' algorithm during the next tick. generateData | generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. reset | reset() -> None This method sets the current index of the data provided by the data source back to zero to reset the data source. Returns : void seqclupv.library.distance This package contains implementations of distance measures that are used in the 'SeqClu' algorithm to compute the distance between two incoming data points. seqclupv.library.distance.dynamic_time_warping This module contains an implementation of the 'Dynamic Time Warping' distance measure that is used in the 'SeqClu' algorithm to compute the distance between two sequences. DynamicTimeWarping Objects class DynamicTimeWarping(IDistanceMeasure) timesCalled | @property | timesCalled() -> int This property stores the counter on the amount of times that the distance measure is used to compute the distance between two sequences. Returns : An integer representing the counter on the amount of times that the distance measure is used to compute the distance between two sequences. __init__ | __init__() -> None This method initializes the distance measure by setting the counter on the amount of times that the distance measure is used to compute the distance between two sequences to zero. calculateDistance | calculateDistance(sequenceOne: ndarray, sequenceTwo: ndarray) -> float This method calculates the distance between two sequences. Arguments : sequenceOne : The first sequence for which the distance should be computed. sequenceTwo : The second sequence for which the distance should be computed. Returns : The distance between the two sequences. reset | reset() -> None This method resets the counter on the amount of times that the distance measure is used to compute the distance between two sequences. Returns : void seqclupv.library.evaluation This package contains implementations of evaluators that can assess the performance of the variants of the 'SeqClu' algorithm. seqclupv.library.evaluation.basic_baseline_prototypes This module contains the class that stores the prototypes of some baseline. This class can be used to compare the prototypes obtained at the end of the online 'Seqclu' algorithm, where the number of identical prototypes divided by the total number of prototypes can be used as evaluation metric. BasicBaselinePrototypes Objects class BasicBaselinePrototypes(IBaselinePrototypes) getPrototypes | @staticmethod | getPrototypes(experimentName: str) -> Optional[List[List[str]]] This method returns the prototypes that were obtained after executing some baseline algorithm. These prototypes can be compared to the prototypes obtained at the end of the online 'SeqClu' algorithm, where the number of identical prototypes divided by the total number of prototypes can be used as evaluation metric. Arguments : experimentName : The name of the experiment for which the prototypes need to be retrieved. Returns : The prototypes obtained after executing some experiment identified by the experiment name. seqclupv.library.evaluation.basic_evaluator This module is an implementation of an evaluator that measures the accuracy of the results obtained from the 'SeqClu' algorithm as well as various other metrics such as the silhouette score, the number of distance computations that were made and the time taken to execute the algorithm. BasicEvaluator Objects class BasicEvaluator(IEvaluator) actualLabels | @property | actualLabels() -> Dict[str, Union[chr, int]] This property stores the correct labels of the data processed by the 'SeqClu' algorithm in a dictionary where the keys are the hashes of the data. Returns : A dictionary where the keys are the hashes of the data and the values are the correct labels of the data processed by the 'SeqClu' algorithm. baselinePrototypes | @property | baselinePrototypes() -> Optional[List[List[str]]] This property stores the prototypes of the baseline that are used in the evaluator. Returns : The prototypes of the baseline that are used in the evaluator. fakeDataSource | @property | fakeDataSource() -> FakeDataSource This property stores the fake data source that is used in the evaluator. Returns : The fake data source that is used in the evaluator. distanceMeasure | @property | distanceMeasure() -> DynamicTimeWarping This property stores the distance measure that is used in the 'SeqClu' algorithm. Returns : The distance measure that is used in the 'SeqClu' algorithm. seqClu | @property | seqClu() -> Optional[SeqClu] This property stores the 'SeqClu' algorithm that is used in the evaluator. Returns : The 'SeqClu' algorithm that is used in the evaluator. seqCluBaselineOffline | @property | seqCluBaselineOffline() -> Optional[SeqCluBaselineOffline] This property stores the offline baseline variant of the 'SeqClu' algorithm that is used in the evaluator. Returns : The offline baseline variant of the 'SeqClu' algorithm that is used in the evaluator. seqCluBaselineOnline | @property | seqCluBaselineOnline() -> Optional[SeqCluBaselineOnline] This property stores the online baseline variant of the 'SeqClu' algorithm that is used in the evaluator. Returns : The online baseline variant of the 'SeqClu' algorithm that is used in the evaluator. __init__ | __init__(fakeDataSource: FakeDataSource, distanceMeasure: DynamicTimeWarping, seqClu: Optional[SeqClu], seqCluBaselineOnline: Optional[SeqCluBaselineOnline], seqCluBaselineOffline: Optional[SeqCluBaselineOffline], baselinePrototypes: Optional[List[List[str]]]) -> None This method initializes the evaluator. Arguments : fakeDataSource : The fake data source that is used in the evaluator. distanceMeasure : The distance measure that is used in the 'SeqClu' algorithm. seqClu : The 'SeqClu' algorithm that is used in the evaluator. seqCluBaselineOnline : The online baseline variant of the 'SeqClu' algorithm that is used in the evaluator. seqCluBaselineOffline : The offline baseline variant of the 'SeqClu' algorithm that is used in the evaluator. baselinePrototypes : The prototypes of the baseline that are used in the evaluator. Returns : void evaluate | evaluate() -> None This method evaluates the performance of the variants of the 'SeqClu' algorithm. Returns : void seqclupv.library.heuristics This package contains implementations of heuristic functions that are used in variants of the 'SeqClu' algorithm. seqclupv.library.heuristics.linear_prototype_value This module contains an implementation of a heuristic functions that are used in variants of the 'SeqClu' algorithm. The heuristic function calculates the value of a (candidate) prototype based on a linear combination of the representativeness and the weight of the (candidate) prototype. LinearPrototypeValue Objects class LinearPrototypeValue(IPrototypeValue) ratio | @property | ratio() -> float Returns the value 'a' in a:1 where a:1 is the ratio between the representativeness and the weight. Returns : The value 'a' in a:1 where a:1 is the ratio between the representativeness and the weight. __init__ | __init__(ratio: float) -> None This method initializes the function that returns the linear combination of the representativeness and weight of a prototype. Arguments : ratio : The value 'a' in a:1 where a:1 is the ratio between the representativeness and the weight. evaluate | evaluate(representativeness: float, weight: float) -> float This method evaluates the function that returns the linear combination of the representativeness and weight of some prototype. Arguments : representativeness : The representativeness of some prototype. weight : The weight of some prototype. Returns : The value of the prototype. seqclupv.library.interfaces This package contains all interfaces that are used in the 'SeqClu' framework. seqclupv.library.interfaces.baseline_prototypes This module contains the interface for the class that stores the prototypes of some baseline. This class can be used to compare the prototypes obtained at the end of the online 'Seqclu' algorithm, where the number of identical prototypes divided by the total number of prototypes can be used as evaluation metric. IBaselinePrototypes Objects class IBaselinePrototypes(ABC) getPrototypes | @staticmethod | @abstractmethod | getPrototypes(experimentName: str) -> Optional[List[List[str]]] This method returns the prototypes that were obtained after executing some baseline algorithm. These prototypes can be compared to the prototypes obtained at the end of the online 'SeqClu' algorithm, where the number of identical prototypes divided by the total number of prototypes can be used as evaluation metric. Arguments : experimentName : The name of the experiment for which the prototypes need to be retrieved. Returns : The prototypes obtained after executing some experiment identified by the experiment name. seqclupv.library.interfaces.candidate_store This module contains an interface for the data structure that stores the candidate prototypes for all clusters that are maintained as part of the 'SeqClu' algorithm. ICandidateStore Objects class ICandidateStore(ABC) candidates | @property | @abstractmethod | candidates() -> Dict[str, Tuple[ndarray, Set[int]]] This property returns the candidate prototypes along with the indices of the clusters that the sequences are candidates for that are stored in the candidate store. Returns : The candidate prototypes stored in the candidate store. candidateHistory | @property | @abstractmethod | candidateHistory() -> Dict[str, int] This property returns a dictionary where the keys are the candidate hashes and the values are the ticks at which the candidate prototypes were last updated. Returns : A dictionary where the keys are the candidate hashes and the values are the ticks at which the candidate prototypes were last updated. lastUpdate | @property | @abstractmethod | lastUpdate() -> int This property returns the tick at which the candidate store was last updated. Returns : An integer representing the tick at which the candidate store was last updated. addToCandidates | @abstractmethod | addToCandidates(candidate: ndarray, candidateFor: Set[int], tick: int) -> None This method adds a sequence to the candidate store for a set of clusters at a given tick. Arguments : candidate : The sequence that is added as a candidate to the candidate store. candidateFor : The set of clusters that the sequence is a candidate for. tick : The tick at which the candidate is added to the candidate store. Returns : void getCandidate | @abstractmethod | getCandidate(candidateHash: str) -> Tuple[ndarray, Set[int]] This method returns a candidate prototype given its hash along with the indices of the clusters that the sequence is a candidate for. Arguments : candidateHash : The hash of the candidate prototypes that needs to be returned along with the indices of the clusters that the sequence is a candidate for. Returns : The candidate prototype given its hash along with the indices of the clusters that the sequence is a candidate for. lastUpdateCandidate | @abstractmethod | lastUpdateCandidate(candidateHash: str) -> Optional[int] This method returns the tick at which the candidate was last updated. Arguments : candidateHash : The hash of the candidate for which the tick at which it was last updated needs to be returned. Returns : An integer representing the tick at which the candidate was last updated. removeFromCandidates | @abstractmethod | removeFromCandidates(candidateHash: str) -> None This method removes a candidate, identified by its hash, from the candidate store. Arguments : candidateHash : The hash of the candidate that needs to be removed from the candidate store. Returns : void seqclupv.library.interfaces.data_generator This module contains an interface for classes that are responsible for generating data that is passed to the 'SeqClu' algorithm. IDataGenerator Objects class IDataGenerator(ABC) classes | @property | classes() -> Optional[chr] This property stores the identifiers of items that are present in the data set. Returns : A list of integers that represent the identifiers of the classes of the items that are present in the data set. classDictionary | @property | classDictionary() -> Dict[str, int] This property stores a mapping from class identifiers to indices. Returns : A dictionary in which the keys are the identifiers of the classes of the items that are present in the data set and the values are the indices of the classes that can be used to retrieve the data that belong to a given class from a two-dimensional list containing all items in the data set. data | @property | data() -> Optional[List[ndarray]] This property stores the data in the data set. Returns : A list of sequences that are present in the data set. distances | @property | distances() -> Optional[ndarray] This property stores the pair-wise distances of items in the data set. Returns : A two-dimensional array of pair-wise distances where indices i,j represent the indices of the two items in the list of sequences stored in the 'data' property. indices | @property | indices() -> Optional[List[int]] This property stores the indices of items in the data set. Returns : A list of indices of items in the data set. labels | @property | labels() -> Optional[List[chr]] This property stores the labels of items in the data set. Returns : A list of labels of items in the data set. numPrototypes | @property | numPrototypes() -> int This property stores the number of prototypes that should be drawn from the data set. Returns : An integer representing the number of prototypes that should be drawn from the data set. generateData | @abstractmethod | generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. __init__ | __init__(numPrototypes: int) -> None This method initializes the properties of the class. Arguments : numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. Returns : void seqclupv.library.interfaces.data_source This module contains the interface for the data sources that are used by the 'SeqClu' algorithm to request data at every tick. IDataSource Objects class IDataSource(ABC) classes | @property | @abstractmethod | classes() -> List[Union[chr, int]] This property stores all the classes that are present in the data source. Returns : All the classes that are present in the data set. advanceTick | @abstractmethod | advanceTick() -> List[Union[ndarray, list]] This method advances the state of the data source by one tick. The method returns a list of sequences that should be processed by the 'SeqClu' algorithm during the next tick. Returns : A list of sequences that should be processed by the 'SeqClu' algorithm during the next tick. seqclupv.library.interfaces.distance_measure This module contains an interface for the distance measures that are used to compute the distance between two data points in the 'SeqClu' algorithm. IDistanceMeasure Objects class IDistanceMeasure(ABC) calculateDistance | @abstractmethod | calculateDistance(sequenceOne: Union[ndarray, list], sequenceTwo: Union[ndarray, list]) -> float This method calculates the distance between two sequences. Arguments : sequenceOne : The first sequence for which the distance should be computed. sequenceTwo : The second sequence for which the distance should be computed. Returns : The distance between the two sequences. seqclupv.library.interfaces.evaluator This module contains the interface for evaluators that can assess the performance of the variants of the 'SeqClu' algorithm. IEvaluator Objects class IEvaluator(ABC) evaluate | @abstractmethod | evaluate() -> None This method evaluates the performance of the variants of the 'SeqClu' algorithm. Returns : void seqclupv.library.interfaces.fake_data_source This module contains the interface for fake data sources that store a predefined data set that the 'SeqClu' algorithm can request data to process from. IFakeDataSource Objects class IFakeDataSource(IDataSource, ABC) data | @property | @abstractmethod | data() -> List[Union[ndarray, list]] This property stores the data provided by the data source. Returns : The data provided by the data source. numClasses | @property | @abstractmethod | numClasses() -> int The number of classes that are present in the data provided by the data source. Returns : An integer representing the number of classes that are present in the data provided by the data source. seqclupv.library.interfaces.heuristics This package contains interfaces for heuristic functions that are used in variants of the 'SeqClu' algorithm. seqclupv.library.interfaces.heuristics.prototype_value This module contains the interface for a heuristic function that calculates the value of a (candidate) prototype given the representativeness and weight of the prototype. IPrototypeValue Objects class IPrototypeValue(ABC) evaluate | @abstractmethod | evaluate(representativeness: float, weight: float) -> float This method evaluates the function that returns the linear combination of the representativeness and weight of some prototype. Arguments : representativeness : The representativeness of some prototype. weight : The weight of some prototype. Returns : The value of the prototype. seqclupv.library.interfaces.seqclu This module contains an interface for the 'SeqClu' algorithm. Some methods are already implemented. ISeqClu Objects class ISeqClu(ABC) classes | @property | classes() -> List[Union[chr, int]] This property stores the classes of the items that are present in the data set. Returns : The classes of the items that are present in the data set. dataSource | @property | dataSource() -> IDataSource This property stores the data source that is used to retrieve data that need to be processed by the algorithm. Returns : The data source that is used to retrieve data that need to be processed by the algorithm. distanceMeasure | @property | distanceMeasure() -> IDistanceMeasure This property stores the distance measure that is used to compute the distance between two sequences. Returns : The distance measure that is used to compute the distance between two sequences. finalLabels | @property | @abstractmethod | finalLabels() -> Dict[str, Union[chr, int]] This property stores the correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. Returns : The correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. finish | @property | finish() -> bool This property stores a boolean value indicating whether or not the algorithm finished executing. Returns : A boolean value indicating whether or not the algorithm finished executing. numClusters | @property | numClusters() -> int This property stores the number of clusters that are used in the 'SeqClu' algorithm. Returns : An integer representing the number of clusters that are used in the 'SeqClu' algorithm. numPrototypes | @property | numPrototypes() -> int This property stores the number of prototypes that are used in the 'SeqClu' algorithm. Returns : An integer representing the number of prototypes that are used in the 'SeqClu' algorithm. tick | @property | tick() -> int This property stores the tick of the algorithm, which represents the moment in time relative to the start of the execution of the algorithm. Returns : An integer representing the tick of the algorithm, which represents the moment in time relative to the start of the execution of the algorithm. finish | @finish.setter | finish(value: bool) -> None This is the setter for the 'finish' property. Arguments : value : The value that the 'finish' property should be set to. Returns : void __init__ | __init__(dataSource: IDataSource, distanceMeasure: IDistanceMeasure, numClusters: int, numPrototypes: int) -> None This method initializes the 'SeqClu' algorithm with a data source, distance measure, number of clusters and number of prototypes. Arguments : dataSource : The data source that should be used in the 'SeqClu' algorithm. distanceMeasure : The distance measure that should be used in the 'SeqClu' algorithm. numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm. Returns : void execute | @abstractmethod | execute() -> None This method executes the 'SeqClu' algorithm from start to finish. The main loop over the data is implemented in here. Returns : void processSequence | @abstractmethod | processSequence(sequence: Tuple[str, ndarray], considerCandidacy: bool) -> None This method processes one sequence of the data set that is processed in the 'SeqClu' algorithm. Arguments : sequence : The sequence that should be processed in the 'SeqClu' algorithm. considerCandidacy : A boolean value indicating whether or not the algorithm should consider if the sequence could be a prototype for any of the clusters. Returns : void seqclupv.library.storage This package contains classes that are responsible for storing information that is relevant to the clustering process that is part of the 'SeqClu' algorithm. The relevant information includes a set of candidate prototypes, a set of clusters and a set of prototypes for some cluster. seqclupv.library.storage.candidates This module contains a class called 'CandidateStore' that stores the candidate prototypes that are used in the 'SeqClu' algorithm. CandidateStore Objects class CandidateStore(ICandidateStore) candidates | @property | candidates() -> Dict[str, Tuple[ndarray, Set[int]]] This method is a property that returns the stored set of candidateStore. The candidateStore are stored in a dictionary where key is the hash of the candidate and the value is a tuple containing the candidate itself and a set of cluster identifiers for which this sequence is a candidate prototype. Returns : A dictionary where key is the hash of the candidate and the value is a tuple containing the candidate itself and a set of cluster identifiers for which this sequence is a candidate prototype. candidateHistory | @property | candidateHistory() -> Dict[str, int] This method is a property that returns a dictionary where the key is the hash of some candidate and the value is the tick at which the candidate was added to the buffer. Returns : A dictionary where the key is the hash of some candidate and the value is the tick at which the candidate was added to the buffer. lastUpdate | @property | lastUpdate() -> int This method is a property that returns the tick at which the buffer of candidateStore was last updated. Returns : The tick at which the buffer of candidateStore was last updated. __init__ | __init__(numRepresentativePrototypes: int, numPrototypes: int, tick: int) -> None This method initializes the buffer of candidateStore with a given number of representative prototypes, total number of prototypes, the maximum size of the buffer of candidateStore and the tick at which the buffer is initialized. Arguments : numRepresentativePrototypes : The number of representative prototypes. numPrototypes : The total number of prototypes. tick : The tick at which the buffer of candidateStore is initialized. addToCandidates | addToCandidates(candidate: Tuple[Optional[str], Optional[ndarray]], candidateFor: Set[int], tick: int) -> None This method adds an incoming sequence to the buffer of candidateStore. Arguments : candidate : The incoming sequence that needs to be added to the buffer of candidateStore. candidateFor : The identifiers of the clusters that the incoming sequence is a candidate for. tick : The tick at which the incoming sequence is promoted to a candidate. Returns : void getCandidate | getCandidate(candidateHash: str) -> Tuple[ndarray, Set[int]] This method returns a candidate given its hash. Arguments : candidateHash : The hash of the candidate that is requested. Returns : A two-tuple containing the candidate itself and the identifiers of the clusters that the sequence is a candidate for. lastUpdateCandidate | lastUpdateCandidate(candidateHash: str) -> int This method returns the tick at which a candidate that is stored in the buffer was last updated. Arguments : candidateHash : The hash of the candidate for which the information about when the candidate was last updated is requested. Returns : The tick at which a candidate that is stored in the buffer was last updated. removeFromCandidates | removeFromCandidates(candidateHash: str) -> None This method removes a sequence from the set of candidateStore. This occurs when the sequence is fully processed and either promoted to a prototype or discarded. Arguments : candidateHash : The hash of the candidate. Returns : void seqclupv.library.storage.cluster This module contains an implementation of the data structure that stores all relevant information about one of the clusters that are maintained as part of the 'SeqClu' algorithm. ClusterStore Objects class ClusterStore() averageDistance | @property | averageDistance() -> float This property stores the average distance between any prototype and all other prototypes in the cluster. Returns : The average distance between any prototype and all other prototypes in the cluster. averageDistanceFromRepresentativeToNonRepresentative | @property | averageDistanceFromRepresentativeToNonRepresentative() -> float This property stores the average distance from representative prototypes to non-representative prototypes in the cluster. Returns : The average distance from representative prototypes to non-representative prototypes in the cluster. averageRepresentativeness | @property | averageRepresentativeness() -> float This property stores the average representativeness of prototypes in the cluster. Returns : The average representativeness of prototypes in the cluster. averageSumOfDistances | @property | averageSumOfDistances() -> float This property stores the average sum of distances between all pairs of prototypes in the cluster. Returns : The average sum of distances between all pairs of prototypes in the cluster. distanceMeasure | @property | distanceMeasure() -> IDistanceMeasure This property stores the distance measure that is used in the 'SeqClu' algorithm. Returns : The distance measure that is used in the 'SeqClu' algorithm. distances | @property | distances() -> Dict[Tuple[str, str], float] This property stores the pair-wise distances between pairs of (candidate) prototypes. Returns : The pair-wise distances between pairs of (candidate) prototypes. error | @property | error() -> float This property stores the error that is made in every approximation of the distance from an incoming sequence to the cluster. Returns : The error that is made in every approximation of the distance from an incoming sequence to the cluster. identifier | @property | identifier() -> int This property stores the identifier of the cluster. Returns : An integer representing the identifier of the cluster. prototypes | @property | prototypes() -> PrototypeStore This property stores the prototypes of the cluster. Returns : The prototypes of the cluster. sumsOfDistances | @property | sumsOfDistances() -> Dict[Tuple[str, bool], float] This property stores the sum of distances from a given prototype to all other prototypes in the cluster. Returns : The sum of distances from a given prototype to all other prototypes in the cluster. upperBound | @property | upperBound() -> float This property stores the upper bound of the distance between some incoming sequence and the cluster for the sequence to be considered as a candidate prototype. Returns : The upper bound of the distance between some incoming sequence and the cluster for the sequence to be considered as a candidate prototype. __init__ | __init__(identifier: int, numRepresentativePrototypes: int, numPrototypes: int, distanceMeasure: IDistanceMeasure, tick: int) -> None This method initializes the cluster given its identifier, the number of (representative) prototypes, the distance measure that should be used and the tick at which the cluster was initialized. Arguments : identifier : The identifier of the cluster. numRepresentativePrototypes : The number of representative prototypes. numPrototypes : The number of prototypes. distanceMeasure : The distance measure that should be used by the cluster. tick : The tick at which the cluster was initialized. computeAverageDistance | computeAverageDistance(sequence: Tuple[Optional[str], Optional[ndarray]], representative: bool) -> float This method computes the average distance between some sequence and either the representative prototypes or all prototypes. Arguments : sequence : The sequence for which the average distance between itself and some set of prototypes needs to be computed. representative : A boolean value indicating whether or not the distance to the representative prototypes should be computed. If this value is false, the distance to all prototypes is computed instead. Returns : The average distance between the given sequence and either the representative prototypes or all prototypes. isCandidate | isCandidate(sequence: Tuple[Optional[str], Optional[ndarray]], minimumRepresentativeness: float, clusterAssignment: bool) -> Tuple[float, bool, bool] This method checks if a given sequence is a candidate prototype for the cluster. Arguments : sequence : The sequence for which needs to be checked whether or not it is a candidate to become a prototype for the cluster. minimumRepresentativeness : The minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. Returns : A tuple containing either the approximated or accurate distance from the sequence to the cluster, a boolean value indicating whether or not the sequence is a candidate prototype and whether or not the distance from the sequence to the cluster was approximated. isRepresentativeEnough | isRepresentativeEnough(minimumRepresentativeness: float) -> bool This method determines whether or not the representative prototypes of the cluster are representative enough. Arguments : minimumRepresentativeness : The minimum average representativeness the representative prototypes should have for them to be considered representative enough. Returns : A boolean value indicating whether or not the representative prototypes of the cluster are representative enough. pairwiseDistanceOf | pairwiseDistanceOf(sequenceOne: Tuple[Optional[str], Optional[ndarray]], sequenceTwo: Tuple[Optional[str], Optional[ndarray]]) -> float This method calculates the distance of two sequences. The result of this computation is memoized and if the distance is requested again at a later point in time, the calculation is not done again to save time. Arguments : sequenceOne : The first sequence for which the distance should be computed. sequenceTwo : The second sequence for which the distance should be computed. Returns : The computed distance between the two sequences. processSequenceIndefinitely | processSequenceIndefinitely(sequenceHash: str) -> None This method processes a sequence indefinitely, which means it is no longer a (candidate) prototype, but merely a sequence. As a result, all the stored information related to this sequence needs to be removed from the data structures that make up the cluster. This involves removing all pair-wise distances involving the sequence and removing the sequence from the data structure storing the sums of distances. Arguments : sequenceHash : The hash of the sequence that needs to be processed indefinitely. Returns : void representativenessOfSequence | representativenessOfSequence(sequence: Tuple[Optional[str], Optional[ndarray]]) -> float This method calculates the representativeness of a sequence relative to the prototypes of the cluster. Arguments : sequence : The sequence for which the representativeness should be calculated. Returns : A float value between 0 and 1 representing the representativeness of the sequence relative to the prototypes of the cluster. sumOfDistancesOf | sumOfDistancesOf(sequence: Tuple[Optional[str], Optional[ndarray]], representative: bool) -> float This method computes the sum of distances between some sequence and either the representative prototypes or all prototypes. Arguments : sequence : The sequence for which the sum of distances to either the representative prototypes or all prototypes needs to be computed. representative : A boolean value indicating whether or not the distance to the representative prototypes should be computed. If this value is false, the distance to all prototypes is computed instead. Returns : The computed sum of distances. This sum of distances is also memoized such that it can be re-used at a later point in time. updatePrototypes | updatePrototypes(newPrototypes: Dict[str, ndarray], newOtherPrototypeHashes: Set[str], newRepresentativePrototypeHashes: Set[str], tick: int) -> Set[str] This method updates the prototypes of the cluster. Arguments : newPrototypes : The new prototypes as a dictionary where the keys are the hashes of the new prototypes and the values are the prototypes itself. newOtherPrototypeHashes : The hashes of new non-representative prototypes. newRepresentativePrototypeHashes : The hashes of new representative prototypes. tick : The tick at which the prototypes are updated. Returns : The hashes of the prototypes that were removed. seqclupv.library.storage.prototypes This module contains a class called 'PrototypeStore' that is responsible for storing the prototypes of one of the clusters that is obtained as a result of executing the 'SeqClu' algorithm. PrototypeStore Objects class PrototypeStore() fullyInitialized | @property | fullyInitialized() -> bool This method is a property that returns a boolean indicating whether or not the data structure has been initialized in full. Returns : A boolean indicating whether or not the data structure has been initialized in full. lastUpdate | @property | lastUpdate() -> int This method is a property that returns the tick at which the data structure of prototypes was last updated. Returns : The tick at which the data structure of prototypes was last updated. numRepresentativePrototypes | @property | numRepresentativePrototypes() -> int This method is a property that returns the number of representative prototypes of some cluster. Returns : The number of representative prototypes of the cluster. numOtherPrototypes | @property | numOtherPrototypes() -> int This method is a property that returns the number of prototypes that are not representative prototypes of some cluster. Returns : The number of prototypes that are not representative prototypes of some cluster. numPrototypes | @property | numPrototypes() -> int This method is a property that returns the total number of prototypes of some cluster. Returns : The total number of prototypes of some cluster. otherPrototypeHashes | @property | otherPrototypeHashes() -> Set[str] This method is a property that returns the hashes of the prototypes that are not representative prototypes of some cluster. Returns : The hashes of the prototypes that are not representative prototypes of some cluster. prototypeHistory | @property | prototypeHistory() -> Dict[str, int] This method is a property that returns a dictionary where the key is the hash of some prototype and the value is the tick at which the prototype was last updated. Returns : A dictionary where the key is the hash of some prototype and the value is the tick at which the prototype was last updated. prototypes | @property | prototypes() -> Dict[str, ndarray] This method is a property that returns a dictionary where the key is the hash of some prototype and the value is the prototype itself. Returns : A dictionary where the key is the hash of some prototype and the value is the prototype itself. representativePrototypesInitialized | @property | representativePrototypesInitialized() -> bool This property stores a boolean value indicating whether or not the representative prototypes have been initialized. Returns : A boolean value indicating whether or not the representative prototypes have been initialized. representativePrototypeHashes | @property | representativePrototypeHashes() -> Set[str] This method is a property that returns the hashes of the prototypes that are representative prototypes of some cluster. Returns : The hashes of the prototypes that are representative prototypes of some cluster. updatingPrototypes | @property | updatingPrototypes() -> bool This property stores a boolean value indicating whether or not the prototypes are currently being updated. Returns : A boolean value indicating whether or not the prototypes are currently being updated. __init__ | __init__(numRepresentativePrototypes: int, numPrototypes: int, tick: int) -> None This method initializes the 'PrototypeStore' class with a given number of representative prototypes, number of total prototypes and the tick at which the class is initialized. Arguments : numRepresentativePrototypes : The number of representative prototypes. numPrototypes : The total number of prototypes. tick : The tick at which the class is initialized. Returns : void addPrototype | addPrototype(prototype: Tuple[Optional[str], Optional[ndarray]], representative: bool, tick: int, toReplaceHash: Optional[str]) -> None This method adds a prototype to the set of prototypes that is stored in this class. Arguments : prototype : The sequence that needs to be added as prototype. representative : A boolean value indicating whether or not the sequence should become a representative prototype. tick : The tick at which the sequence is added to the set of prototypes that is stored in this class. toReplaceHash : An optional hash of the sequence that needs to be demoted to a regular sequence from a prototype. Returns : void getPrototype | getPrototype(prototypeHash: str) -> ndarray This method returns a prototype given the hash of this prototype. Arguments : prototypeHash : The hash of the prototype that is requested. Returns : The requested prototype. lastUpdatePrototype | lastUpdatePrototype(prototypeHash: str) -> Optional[int] This method returns the tick at which some prototype was last updated given the hash of this prototype. Arguments : prototypeHash : The hash of the prototype for which information about when it was last updated is requested. Returns : The tick at which the prototype corresponding to the given hash was last updated. updatePrototypes | updatePrototypes(newPrototypes: Dict[str, ndarray], newOtherPrototypeHashes: Set[str], newRepresentativePrototypeHashes: Set[str], tick: int) -> Set[str] This method updates the prototypes stored in the prototype store. Arguments : newPrototypes : The new prototypes as a dictionary where the keys are the hashes of the new prototypes and the values are the prototypes itself. newOtherPrototypeHashes : The hashes of new non-representative prototypes. newRepresentativePrototypeHashes : The hashes of new representative prototypes. tick : The tick at which the prototypes are updated. Returns : The hashes of the prototypes that were removed. seqclupv.library.storage.prototype_frequencies This module contains an implementation of a data structure that stores how often a prototype has been observed to be the closest to one of the prototypes of that cluster. PrototypeFrequencyStore Objects class PrototypeFrequencyStore() computeSumOfDistances | @staticmethod | computeSumOfDistances(prototypeHashes: Set[str], distances: Dict[Tuple[str, str], float]) -> float This method computes the sum of distances between all pairs of prototypes identified by a set of prototype hashes given a dictionary of pair-wise distances. Arguments : prototypeHashes : The hashes of the prototypes for which the sum of pair-wise distances needs to be computed. distances : The pair-wise distances stored in a dictionary identified by a tuple of prototype hashes that identify the two prototypes. Returns : The sum of distances for the given prototypes and dictionary of distances. frequencies | @property | frequencies() -> Dict[str, Optional[int]] This property stores the amount of times a prototype has been observed as being closest to an incoming sequence as a dictionary where the keys are the hashes of the prototypes. Returns : A dictionary where the keys are the hashes of the prototypes and the values are the amounts of times a prototype has been observed as being closest to an incoming sequence. numPrototypes | @property | numPrototypes() -> int This property stores the number of prototypes that will be used in the 'SeqClu' algorithm. Returns : An integer representing the number of prototypes that will be used in the 'SeqClu' algorithm. totalObservations | @property | totalObservations() -> int This property stores the total number of observations that was made. Returns : An integer representing the total number of observations that was made. __init__ | __init__(numPrototypes: int) -> None This method initializes the data structure storing information about the prototype frequencies. Arguments : numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. closestPrototypeObserved | closestPrototypeObserved(prototypeHash: str, numVotes: int) -> None This method adds a given amount of votes to the amount of votes that a prototype already has. Arguments : prototypeHash : The hash of the prototype that should get votes. numVotes : The number of votes that the prototype should get. Returns : void getWeight | getWeight(prototypeHash: str) -> float This method calculates the weight of a prototype, identified by its hash, and returns this value. Arguments : prototypeHash : The hash of the prototype for which the weight needs to be calculated and returned. Returns : The weight of the prototype identified by its hash. initializePrototype | initializePrototype(prototypeHash: str) -> None This method initializes a prototype given its hash. Arguments : prototypeHash : The hash of the prototype for which an entry needs to be added to the prototype frequencies data structure. Returns : void updatePrototypes | updatePrototypes(newPrototypeHashes: Set[str], addedPrototypeHashes: Set[str], removedPrototypeHashes: Set[str], distances: Dict[Tuple[str, str], float]) -> None This method updates the prototypes that are stored in the prototype frequencies store given sets of updated prototype hashes, newly added prototype hashes and rmeoved prototype hashes, as well as a dictionary of pair-wise distances for all pairs of prototypes, regardless of whether or not these prototypes are discarded. Arguments : newPrototypeHashes : The hashes of the updated prototypes. addedPrototypeHashes : The hashes of the newly dded prototypes. removedPrototypeHashes : The hashes of the removed prototypes. distances : The pair-wise distances for all pairs of prototypes, regardless of whether or not these prototypes are discarded. Returns : void seqclupv.library.storage.sequences This module contains a class called 'SequenceStore' that stores the ambiguous sequence that have yet to be clustered in the 'SeqClu' algorithm. SequenceStore Objects class SequenceStore() sequences | @property | sequences() -> Dict[str, ndarray] This method is a property that returns the stored set of ambiguous sequenceStore. The sequenceStore are stored in a dictionary where key is the hash of the sequence and the value is the sequence itself. Returns : A dictionary where key is the hash of the sequence and the value is the sequence itself. sequenceHistory | @property | sequenceHistory() -> Dict[str, int] This method is a property that returns a dictionary where the key is the hash of some sequence and the value is the tick at which the sequence was added to the buffer. Returns : A dictionary where the key is the hash of some sequence and the value is the tick at which the sequence was added to the buffer. lastUpdate | @property | lastUpdate() -> int This method is a property that returns the tick at which the buffer of sequenceStore was last updated. Returns : The tick at which the buffer of sequenceStore was last updated. __init__ | __init__(tick: int) -> None This method initializes the buffer of sequenceStore with a given tick at which the buffer is initialized. Arguments : tick : The tick at which the buffer of sequenceStore is initialized. addToSequences | addToSequences(sequence: ndarray, tick: int) -> None This method adds an incoming sequence to the buffer of sequenceStore. Arguments : sequence : The incoming sequence that needs to be added to the buffer of sequenceStore. tick : The tick at which the incoming sequence is promoted to a sequence. Returns : void getSequence | getSequence(sequenceHash: str) -> ndarray This method returns a sequence given its hash. Arguments : sequenceHash : The hash of the sequence that is requested. Returns : The requested sequence. lastUpdateSequence | lastUpdateSequence(sequenceHash: str) -> int This method returns the tick at which a sequence that is stored in the buffer was last updated. Arguments : sequenceHash : The hash of the sequence for which the information about when the sequence was last updated is requested. Returns : The tick at which a sequence that is stored in the buffer was last updated. removeFromSequences | removeFromSequences(sequenceHash: str) -> None This method removes a sequence from the set of sequenceStore. This occurs when the sequence is fully processed and discarded. Arguments : sequenceHash : The hash of the sequence. Returns : void seqclupv.library.utilities This package contains utility methods that are used throughout the 'SeqClu' framework. seqclupv.library.utilities.calculate_f1_score This module contains a method that calculates the F1-score given sets of true labels and predicted labels. calculate_f1_score calculate_f1_score(trueLabels: Dict[str, Union[chr, int]], predictedLabels: Dict[str, Union[chr, int]], average: str) -> float This method calculates the F1-score given a set of true labels and predicted labels as well as the averaging procedure that decides the type of F1-score. Arguments : trueLabels : The correct labels of the data as a dictionary where the keys are the hashes of the sequences and the values are the labels. predictedLabels : The predicted labels of the data as a dictionary where the keys are the hashes of the sequences and the values are the labels. average : The averaging procedure used in the statistical test. The averaging procedure decides the type of F1-score, this can be the micro, macro or weighted F1-score. Returns : The F1-score for the given sets of true labels and predicted labels. seqclupv.library.utilities.construct_stream This module contains a method that constructs a data stream of sequenceStore from a given set of clusters, classes and number of prototypes. constructStream constructStream(clusters: List[List[Union[ndarray, list]]], classes: List[Union[int, chr]], numPrototypes: int) -> Tuple[Stream, Stream] This method constructs a data stream of sequenceStore from a given set of clusters, classes and number of prototypes. Arguments : clusters : The set of clusters that needs to be clustered by some clustering algorithm. classes : The identifier of the classes that belong to the clusters that were passed to this method. numPrototypes : The number of prototypes that will be used in the clustering algorithm. Returns : A two-tuple where the first item is the complete stream and the second item is a stream of sequences from any of the clusters that are not prototypes where the order of sequenceStore is randomized. seqclupv.library.utilities.hash_filter This module contains a method that checks if some hash is part of a key that is a tuple of two hashes. isHashInKey isHashInKey(key: Tuple[str, str], sequenceHash: str) -> bool This method checks if some hash is part of a key that is a tuple of two hashes. Arguments : key : A key that is a tuple of two hashes. sequenceHash : The hash that needs to be compared to the key. Returns : A boolean value indicating whether or not the incoming hash is part of the key. seqclupv.library.utilities.hash_sequence This module contains a method that hashes an incoming sequence using the Python package 'xxhash'. hashSequence hashSequence(sequence: ndarray) -> str This method hashes an incoming sequence using the Python package 'xxhash'. Arguments : sequence : The incoming sequence that needs to be hashed. Returns : The hash of the incoming sequence. seqclupv.library.utilities.statistical_testing This module contains a command-line interface for carrying out a statistical test on two provided samples of data. The function to carry out a statistical test on two provided samples is contained in this module as well. statistical_test statistical_test(sampleOne: ndarray, sampleTwo: ndarray, testName: str) -> None This method carries out some statistical test, identified by its name, on two given samples. Arguments : sampleOne : The first sample that should be used in the statistical test. sampleTwo : The second sample that should be used in the statistical test. testName : The name of the statistical test that should be used. Returns : void main main(argv: List[str]) -> None This method is the command-line interface for the statistical test program. Arguments : argv : The arguments that are passed to the statistical test program. Returns : void seqclupv.library.visualization This module contains classes that bundle several approaches to visualize the results of the variations of the 'SeqClu' algorithm that are contained in the package. seqclupv.library.visualization.visualizer This module contains a class that bundles several approaches to visualize the results of the variations of the 'SeqClu' algorithm that are contained in the package. NOTE: This class has actually never been used during the research project and therefore needs major modifications to make it compatible with the rest of the framework. Visualizer Objects class Visualizer() visualizeInputData | visualizeInputData() -> None This method visualizes the input data in two dimensions. Returns : void visualizeClustersAsTSNE | visualizeClustersAsTSNE() -> None This method visualizes the clusters as TSNE-graphs. Returns : void visualizeClustersAsHeatMaps | visualizeClustersAsHeatMaps() -> None This method visualizes the clusters as heatmaps. Returns : void simulateClusteringProcess | simulateClusteringProcess() -> None This method makes multiple plots that replay the clustering process step-by-step. Returns : void seqclupv.SeqClu This class can be used to process a stream of data in a separate thread while some other thread performs work. The data stream is clustered using the 'SeqClu' algorithm and the labels of items that have already been seen can be requested real-time. SeqClu Objects class SeqClu(ISeqClu) assignToCluster | @staticmethod | assignToCluster(clusters: List[ClusterStore], sequence: Tuple[Optional[str], Optional[ndarray]], distances: List[Tuple[int, float, float]], clusterAssignment: bool) -> Tuple[int, bool] This method assigns a sequence to one of the provided clusters using a dictionary of pair-wise distances. Arguments : clusters : The clusters that the sequence can be assigned to. sequence : The sequence that needs to be assigned to one of the clusters. distances : The pair-wise distances stored in a dictionary identified by a tuple of prototype hashes that identify the two prototypes. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. Returns : A tuple containing the index of the cluster that the sequence was assigned to and a boolean value indicating whether or not the distances used to make the cluster assignment decision were approximated. assignToClusterAccurate | @staticmethod | assignToClusterAccurate(clusters: List[ClusterStore], sequence: Tuple[Optional[str], Optional[ndarray]]) -> int This method assigns a sequence to one of the provided clusters using accurate distances. Arguments : clusters : The clusters that the sequence can be assigned to. sequence : The sequence that needs to be assigned to one of the clusters. Returns : The index of the cluster that the sequence was assigned to. computeDistanceToClusters | @staticmethod | computeDistanceToClusters(clusters: List[ClusterStore], sequence: Tuple[Optional[str], Optional[ndarray]], clusterAssignment: bool) -> List[Tuple[int, float, float]] This method computes the distance of a sequence to all clusters. Arguments : clusters : The clusters for which the distance to the sequence needs to be computed. sequence : The sequence for which the distance to the clusters needs to be computed. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. Returns : A list of tuples containing the index of a cluster, the computed distance and the error made in this computation. For accurate distances, this error is 0. determineCandidacy | @staticmethod | determineCandidacy(candidates: CandidateStore, clusters: List[ClusterStore], sequence: Tuple[Optional[str], Optional[ndarray]], minimumRepresentativeness: float, clusterAssignment: bool) -> Tuple[List[Tuple[int, float, float]], Set[int]] This method determines for which clusters a given sequence is a candidate. Arguments : candidates : The buffer of candidate prototypes. clusters : The clusters that the given sequence could become a prototype for. sequence : The sequence for which needs to be determined whether or not it is a candidate to become a prototype for the clusters. minimumRepresentativeness : The minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. Returns : A tuple containing a list of tuples that each contain the index of some cluster, the computed distance and the error made in this computation, as well as the indices of the clusters that the sequence is a candidate for. initializeClusters | @staticmethod | initializeClusters(numClusters: int, numRepresentativePrototypes: int, numPrototypes: int, distanceMeasure: IDistanceMeasure, tick: int) -> List[ClusterStore] This method initializes the clusters that are used in the algorithm. Arguments : numClusters : The number of clusters that need to be initialized. numRepresentativePrototypes : The number of representative prototypes each cluster needs to have. numPrototypes : The number of prototypes each cluster needs to have. distanceMeasure : The distance measure that is used in the algorithm. tick : The tick at which the clusters are initialized. Returns : The resulting list of initialized clusters. isAmbiguous | @staticmethod | isAmbiguous(distanceAndErrorOne: Tuple[float, float], distanceAndErrorTwo: Tuple[float, float]) -> bool This method determines whether or not two computed distances given their errors are relatively too close to each other and are therefore ambiguous. Arguments : distanceAndErrorOne : The distance and error that resulted from some distance computation. distanceAndErrorTwo : The distance and error that resulted from another distance computation. Returns : A boolean value indicating whether or not the pair of distance computations is ambiguous. processCandidatesForCluster | @staticmethod | processCandidatesForCluster(cluster: ClusterStore, candidates: List[Tuple[str, ndarray]], numPrototypes: int, numRepresentativePrototypes: int, prototypeValue: IPrototypeValue, tick: int) -> Set[str] This method processes the candidate prototypes for a given cluster. The method decides whether or not the candidates are actually of high enough quality to become a prototype and if so, promotes these sequences to prototypes. Arguments : cluster : The cluster for which the candidate prototypes should be processed. candidates : The candidate prototypes that should be processed. numPrototypes : The number of prototypes of all clusters. numRepresentativePrototypes : The number of representative prototypes of all clusters. prototypeValue : The heuristic function that is used to compute the value of a prototype. tick : The tick at which the candidate prototypes were processed. Returns : The hashes of the prototypes that were discarded after processing all candidate prototypes. bufferedSequences | @property | bufferedSequences() -> Set[str] This property stores the sequences that were buffered by the algorithm. Returns : The set of sequences that were buffered by the algorithm. buffering | @property | buffering() -> bool This property stores a boolean value indicating whether or not the buffering feature is enabled. Returns : A boolean value indicating whether or not the buffering feature is enabled. bufferFull | @property | bufferFull() -> bool This method is a property that returns a boolean indicating whether or not the set of candidateStore has reached the maximum allowed size and is therefore full. Returns : A boolean indicating whether or not the set of candidateStore has reached the maximum allowed size and is therefore full. bufferSize | @property | bufferSize() -> int This method is a property that returns the maximum size of the buffer of candidateStore and ambiguous sequenceStore. Returns : The maximum size of the buffer of candidateStore and ambiguous sequenceStore. candidateStore | @property | candidateStore() -> CandidateStore This property stores the buffer of candidate prototypes. Returns : The buffer of candidate prototypes. classes | @property | classes() -> List[Union[chr, int]] Tis property stores the classes that are present in the data set that is processed by the algorithm. Returns : The classes that are present in the data set that is processed by the algorithm. clusterAssignment | @property | clusterAssignment() -> bool This property stores a boolean value indicating whether or not approximation of the distance to clusters is enabled in the algorithm. Returns : A boolean value indicating whether or not approximation of the distance to clusters is enabled in the algorithm. clusteredByApproximation | @property | clusteredByApproximation() -> Set[str] This property stores the sequences that were clustered by approximation by the algorithm. Returns : The set of sequences that were clustered by approximation by the algorithm. clusters | @property | clusters() -> List[ClusterStore] This property stores the clusters that the algorithm needs to work with. Returns : The clusters that the algorithm needs to work with. finalLabels | @property | finalLabels() -> Dict[str, int] This property stores the correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. Returns : The correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. fullyInitialized | @property | fullyInitialized() -> bool This property stores a boolean value indicating whether or not the prototypes of all clusters are fully initialized. Returns : A boolean value indicating whether or not the prototypes of all clusters are fully initialized. labels | @property | labels() -> Dict[str, int] This property stores the predicted labels of all sequences except for those that are prototypes. Returns : The predicted labels of all sequences except for those that are prototypes. minimumRepresentativeness | @property | minimumRepresentativeness() -> float This property stores the minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. Returns : The minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. numFullyProcessed | @property | numFullyProcessed() -> int This property stores the number of sequences that were fully processed by the algorithm. Returns : An integer representing the number of sequences that were fully processed by the algorithm. numRepresentativePrototypes | @property | numRepresentativePrototypes() -> int This property stores the number of representative prototypes of all clusters that are used by the algorithm. Returns : An integer representing the number of representative prototypes of all clusters that are used by the algorithm. prototypeValueHeuristic | @property | prototypeValueHeuristic() -> IPrototypeValue This property stores the heuristic function that is used to compute the value of a prototype. Returns : The heuristic function that is used to compute the value of a prototype. sequenceStore | @property | sequenceStore() -> SequenceStore This property stores the buffer of sequences that is currently not used in the algorithm, but could be used in the future to store sequences that are likely to be assigned incorrectly. Returns : The buffer of sequences that is currently not used in the algorithm, but could be used in the future to store sequences that are likely to be assigned incorrectly. __init__ | __init__(dataSource: IDataSource, distanceMeasure: IDistanceMeasure, numClusters: int, numRepresentativePrototypes: int, numPrototypes: int, bufferSize: int, minimumRepresentativeness: float, prototypeValueHeuristic: IPrototypeValue, clusterAssignment: bool, buffering: bool) -> None This method initializes the 'SeqClu' algorithm with a data source, distance measure, number of clusters and number of prototypes. Arguments : dataSource : The data source that should be used in the 'SeqClu' algorithm. distanceMeasure : The distance measure that should be used in the 'SeqClu' algorithm. numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numRepresentativePrototypes : The number of representative prototypes. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm.' bufferSize : The maximum size of the buffer. minimumRepresentativeness : The minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. prototypeValueHeuristic : The heuristic function that is used to compute the value of a prototype. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. buffering : A boolean value indicating whether or not the buffering feature should be used. Returns : void alreadyProcessed | alreadyProcessed(sequenceHash: str) -> bool This method determines if a sequence, identified by its hash, was already processed in the past. Arguments : sequenceHash : The hash of the sequence for which needs to be determined whether or not it was already processed in the past. Returns : A boolean value indicating whether or not the sequence was already processed in the past. execute | execute() -> None This method executes the 'SeqClu' algorithm from start to finish. The main loop over the data is implemented in here. Returns : void forceProcessBuffer | forceProcessBuffer(persist: bool, tick: int) -> List[ClusterStore] This method forcefully processes the buffer of candidate prototypes. The buffer is then empty again and can fill up over time in the ticks that are to come. Arguments : persist : A boolean value indicating whether or not to persist this action. If this value is set to false, the resulting list of clusters is returned, but all other data structures remain the same as before executing this method. tick : The tick at which the buffer is forcefully processed. Returns : The clusters that are obtained after forcefully processing the buffer. processSequence | processSequence(sequence: Tuple[str, ndarray], considerCandidacy: bool) -> None This method processes one sequence of the data set that is processed in the 'SeqClu' algorithm. Arguments : sequence : The sequence that should be processed in the 'SeqClu' algorithm. considerCandidacy : A boolean value indicating whether or not the algorithm should consider if the sequence could be a prototype for any of the clusters. Returns : void seqclupv.SeqCluBaselineOffline This module contains an implementation of the offline version of the 'SeqClu' algorithm that is based on Partitioning Around Medoids (PAM). SeqCluBaselineOffline Objects class SeqCluBaselineOffline(ISeqClu) initializeClusters | @staticmethod | initializeClusters(numClusters: int, numPrototypes: int) -> ndarray This method initializes the clusters of the 'SeqClu' algorithm given a number of clusters and prototypes. Arguments : numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm.' Returns : The indices of the prototypes for all the clusters, stored in a two-dimensional array. currentConfigurationCost | @property | currentConfigurationCost() -> float This property stores the cost of the current configuration. Returns : A float representing the cost of the current configuration. data | @property | data() -> List[ndarray] This property stores the data that are processed by the 'SeqClu' algorithm. Returns : The data that are processed by the 'SeqClu' algorithm. dataSize | @property | dataSize() -> int This property stores the number of sequences that the data set contains. Returns : An integer representing the number of sequences that the data set contains. distances | @property | distances() -> ndarray This property stores the pair-wise distances for all pairs of sequences in the data set that is processed by the 'SeqClu' algorithm. Returns : A two-dimensional array that contains the pair-wise distances for all pairs of sequences in the data set that is processed by the 'SeqClu' algorithm. clusters | @property | clusters() -> ndarray This property stores the current configuration as a two-dimensional array containing the indices of the prototypes for every cluster. Returns : The current configuration as a two-dimensional array containing the indices of the prototypes for every cluster. finalLabels | @property | finalLabels() -> Tuple[ndarray, Dict[str, int]] This property stores the correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. Returns : The correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. labels | @property | labels() -> ndarray This property stores the labels of all sequences that are not prototypes in the 'SeqClu' algorithm. Returns : The labels of all sequences that are not prototypes in the 'SeqClu' algorithm. maxTicks | @property | maxTicks() -> int This property stores the maximum number of ticks the algorithm is allowed to execute. Returns : An integer representing the maximum number of ticks the algorithm is allowed to execute. time | @property | time() -> float This property stores the time it took the algorithm to initialize itself. Returns : A float representing the number of seconds it took the algorithm to initialize itself. __init__ | __init__(fakeDataSource: FakeDataSource, distanceMeasure: IDistanceMeasure, numClusters: int, numPrototypes: int, maxTicks: int) -> None This method initializes the 'SeqClu' algorithm with a data source, distance measure, number of clusters and number of prototypes. Arguments : fakeDataSource : The fake data source that should be used in the 'SeqClu' algorithm. distanceMeasure : The distance measure that should be used in the 'SeqClu' algorithm. numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm. maxTicks : The maximum number of ticks that the algorithm is allowed to execute. Returns : void execute | execute() -> None This method executes the 'SeqClu' algorithm from start to finish. The main loop over the data is implemented in here. Returns : void processSequence | processSequence(sequence: Tuple[str, ndarray], considerCandidacy: bool) -> None Since this algorithm is the offline variant of the algorithm, sequences are not processed one-by-one, but all at once in an iterative fashion. This method should never be called. seqclupv.SeqCluBaselineOnline This module contains a naive implementation of the online version of the 'SeqClu' algorithm that is used to compare the results of the developed variants of the 'SeqClu' algorithm to the results of the implementation contained in this module that serves as the baseline. SeqCluBaselineOnline Objects class SeqCluBaselineOnline(ISeqClu) finalLabels | @property | finalLabels() -> Dict[str, Union[chr, int]] This property stores the correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. Returns : The correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. __init__ | __init__(dataSource: FakeDataSource, distanceMeasure: IDistanceMeasure, numClusters: int, numPrototypes: int) -> None This method initializes the 'SeqClu' algorithm with a data source, distance measure, number of clusters and number of prototypes. Arguments : dataSource : The data source that should be used in the 'SeqClu' algorithm. distanceMeasure : The distance measure that should be used in the 'SeqClu' algorithm. numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm. Returns : void execute | execute() -> None This method executes the 'SeqClu' algorithm from start to finish. The main loop over the data is implemented in here. Returns : void processSequence | processSequence(sequence: Tuple[str, ndarray], considerCandidacy: bool) -> None This method processes one sequence of the data set that is processed in the 'SeqClu' algorithm. Arguments : sequence : The sequence that should be processed in the 'SeqClu' algorithm. considerCandidacy : A boolean value indicating whether or not the algorithm should consider if the sequence could be a prototype for any of the clusters. Returns : void seqclupv.__main__ This module contains a command-line interface that can be used to run experiments on the HPC cluster. areCurveParameters areCurveParameters(parameters: list) -> bool This method verifies whether or not a list of parameters has the format of parameters that are used to generate a data set of sequences from a sine curve. Arguments : parameters : A list of parameters for which needs to be verified whether or not it has the format of parameters that are used to generate a data set of sequences from a sine curve. Returns : A boolean value indicating whether or not the given list of parameters has the format of parameters that are used to generate a data set of sequences from a sine curve. areStringParameters areStringParameters(parameters: list) -> bool This method verifies whether or not all values in the list are strings. Arguments : parameters : A list of parameters for which needs to be verified whether or not all values in it are strings. Returns : A boolean value indicating whether or not all values in the given list of parameters are strings. areSeqCluParameters areSeqCluParameters(parameters: list) -> bool This method verifies whether or not a list of parameters has the format of parameters that are used to configure the 'SeqClu-PV' algorithm. Arguments : parameters : A list of parameters for which needs to be verified whether or not it has the format of parameters that are used to configure the 'SeqClu-PV' algorithm. Returns : A boolean value indicating whether or not the given list of parameters has the format of parameters that are used to configure the 'SeqClu-PV' algorithm. areTimeSeriesClassificationParameters areTimeSeriesClassificationParameters(parameters: list) -> bool This method verifies whether or not a list of parameters has the format of parameters that are used to load a data set of sequences from data files downloaded from TimeSeriesClassification.com. Arguments : parameters : A list of parameters for which needs to be verified whether or not it has the format of parameters that are used to load a data set of sequences from data files downloaded from TimeSeriesClassification.com. Returns : A boolean value indicating whether or not the given list of parameters has the format of parameters that are used to load a data set of sequences from data files downloaded from TimeSeriesClassification.com. parseBool parseBool(string: str) -> bool This method parses a string to a boolean. Arguments : string : The string that needs to be parsed to a boolean. Returns : The boolean equivalent of the passed string. main main(argv) -> None This method is the main method for the command-line interface of 'SeqClu-PV'. All arguments for the algorithm are passed via 'argv' and the algorithm is then configured and run. Arguments : argv : The parameters that are required to configure the algorithm. Returns : void","title":"API documentation"},{"location":"api-documentation/#seqclupv","text":"This package is the top-level package of 'SeqClu'.","title":"seqclupv"},{"location":"api-documentation/#seqclupvdata","text":"This package contains three data sets, namely: 1. GesturePebbleZ1 (http://www.timeseriesclassification.com/description.php?Dataset=GesturePebbleZ1) 2. UJI Pen Characters (https://archive.ics.uci.edu/ml/datasets/UJI+Pen+Characters) 3. PLAID (http://www.timeseriesclassification.com/description.php?Dataset=PLAID) Additionally, the package contains the original source code provided at the start of the project as a Jupyter Notebook.","title":"seqclupv.data"},{"location":"api-documentation/#seqclupvlibrary","text":"This package contains all source code that is used in the variants of the 'SeqClu' algorithm that are contained in this framework.","title":"seqclupv.library"},{"location":"api-documentation/#seqclupvlibrarydata_generator","text":"This package contains all implementations of data generators that are used to generate data that are passed into the 'SeqClu' algorithm.","title":"seqclupv.library.data_generator"},{"location":"api-documentation/#seqclupvlibrarydata_generatorhandwritten_character_generator","text":"This module contains a class that is responsible for generating handwritten character data that are passed to the 'SeqClu' algorithm. Link to the 'UJI Pen Character' data set https://archive.ics.uci.edu/ml/datasets/UJI+Pen+Characters NOTE: The characters that are contained in the data set are as follows. ['C', 'U', 'V', 'W', 'S', 'O', '1', '2', '3', '5', '6', '8', '9']","title":"seqclupv.library.data_generator.handwritten_character_generator"},{"location":"api-documentation/#parsefile","text":"parseFile(lines: List[str]) -> Dict[str, List[Tuple[int, int]]] This method parses a file containing a data set of sequences. The lines in this file are processed in the method to obtain a dictionary in which the keys represent the name of some class and the values represent a list of sequences that belong to this class. Arguments : lines : The lines that are present in some file containing a data set of sequences. Returns : A dictionary in which the keys represent the name of some class and the values represent a list of sequences that belong to this class.","title":"parseFile"},{"location":"api-documentation/#handwrittencharactergenerator-objects","text":"class HandwrittenCharacterGenerator(IDataGenerator)","title":"HandwrittenCharacterGenerator Objects"},{"location":"api-documentation/#__init__","text":"| __init__(classes: List[chr], numPrototypes: int) -> None This method initializes the data generator with a given list of classes that the generated data set should contain. Arguments : classes : The classes that are present in the data set as a list of characters. numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. Returns : void","title":"__init__"},{"location":"api-documentation/#generatedata","text":"| generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences.","title":"generateData"},{"location":"api-documentation/#seqclupvlibrarydata_generatorpebble_generator","text":"This module contains a class that is responsible for generating gesture pebble data that are passed to the 'SeqClu' algorithm. Link to the 'GesturePebbleZ1' data set http://www.timeseriesclassification.com/description.php?Dataset=GesturePebbleZ1","title":"seqclupv.library.data_generator.pebble_generator"},{"location":"api-documentation/#gesturepebblegenerator-objects","text":"class GesturePebbleGenerator(TimeSeriesClassificationBase)","title":"GesturePebbleGenerator Objects"},{"location":"api-documentation/#__init___1","text":"| __init__(numPrototypes: int, computeDistances: bool) -> None This method initializes the data generator given the number of prototypes and a boolean value indicating whether or not the pair-wise distances between all items in the data set need to be computed. This data generator is applicable to the 'GesturePebbleZ1' data set. Arguments : numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. computeDistances : A boolean value indicating whether or not the pair-wise distances between all items in the data set.","title":"__init__"},{"location":"api-documentation/#generatedata_1","text":"| generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences.","title":"generateData"},{"location":"api-documentation/#seqclupvlibrarydata_generatorplaid_generator","text":"This module contains a class that is responsible for generating PLAID data that are passed to the 'SeqClu' algorithm. Link to the 'PLAID' data set http://www.timeseriesclassification.com/description.php?Dataset=PLAID","title":"seqclupv.library.data_generator.plaid_generator"},{"location":"api-documentation/#plaidgenerator-objects","text":"class PLAIDGenerator(TimeSeriesClassificationBase)","title":"PLAIDGenerator Objects"},{"location":"api-documentation/#__init___2","text":"| __init__(numPrototypes: int, computeDistances: bool) -> None This method initializes the data generator given the number of prototypes and a boolean value indicating whether or not the pair-wise distances between all items in the data set need to be computed. This data generator is applicable to the 'GesturePebbleZ1' data set. Arguments : numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. computeDistances : A boolean value indicating whether or not the pair-wise distances between all items in the data set.","title":"__init__"},{"location":"api-documentation/#generatedata_2","text":"| generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences.","title":"generateData"},{"location":"api-documentation/#seqclupvlibrarydata_generatorsine_curve_generator","text":"This module contains a class that is responsible for generating data from a sine curve that are passed to the 'SeqClu' algorithm.","title":"seqclupv.library.data_generator.sine_curve_generator"},{"location":"api-documentation/#curvegenerator-objects","text":"class CurveGenerator(IDataGenerator)","title":"CurveGenerator Objects"},{"location":"api-documentation/#error","text":"| @property | error() -> float This property stores the error factor that is used to add noise to the sine curve with a random number generator. Returns : A float representing the error factor.","title":"error"},{"location":"api-documentation/#freq","text":"| @property | freq() -> Tuple[float, float] This property stores the lower and upper bound used to draw a sample from a uniform distribution that will be used as the frequency. Returns : Two floats representing the lower and upper bound used to draw a sample from a uniform distribution that will be used as the frequency.","title":"freq"},{"location":"api-documentation/#n","text":"| @property | n() -> int This property stores the number of sequences that should be generated. Returns : An integer that represents the number of sequences that should be generated.","title":"n"},{"location":"api-documentation/#phase","text":"| @property | phase() -> int This property stores the phase that is used to generate the sine curve. Returns : An integer that represents the phase that is used to generate the sine curve.","title":"phase"},{"location":"api-documentation/#samplingrate","text":"| @property | samplingRate() -> int Defines how the rate at which samples are generated. The higher the value, the fewer samples are generated. Returns : An integer representing the rate at which samples are generated.","title":"samplingRate"},{"location":"api-documentation/#__init___3","text":"| __init__(n: int, freq: Tuple[float, float], samplingRate: int, error: float, phase: int) -> None This method initializes the data generator that is applicable to the sine curve data set with the parameters that are required to generate the data set. Arguments : n : The amount of samples that are generated. freq : The lower and upper bound of the distribution that generates the frequency of a sample. samplingRate : The rate at which samples are generated. error : The error factor used to add noise to samples. phase : The phase that is used to generate the sine curve.","title":"__init__"},{"location":"api-documentation/#generatedata_3","text":"| generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences.","title":"generateData"},{"location":"api-documentation/#seqclupvlibrarydata_generatortime_series_classification_base","text":"This module contains a base class that is responsible for generating time series data from https://www.timeseriesclassification.com that are passed to the 'SeqClu' algorithm.","title":"seqclupv.library.data_generator.time_series_classification_base"},{"location":"api-documentation/#timeseriesclassificationbase-objects","text":"class TimeSeriesClassificationBase(IDataGenerator, ABC)","title":"TimeSeriesClassificationBase Objects"},{"location":"api-documentation/#loaddata","text":"| @staticmethod | loadData(path: str, filenames: List[str]) -> Tuple[List[ndarray], List[str]] This method loads the data from a given path to some directory and file name. Arguments : path : The path to some directory, relative to the current working directory. filenames : The names of the files that should be loaded. Returns : The data that was loaded from all of the files.","title":"loadData"},{"location":"api-documentation/#computedistances","text":"| @property | computeDistances() -> bool This property stores a boolean value indicating whether or not the pair-wise distances between items in the data set should be computed. Returns : A boolean value indicating whether or not the pair-wise distances between items in the data set should be computed.","title":"computeDistances"},{"location":"api-documentation/#__init___4","text":"| __init__(numPrototypes: int, computeDistances: bool) -> None This method initializes the data generator given the number of prototypes that are drawn from the data set and a boolean value indicating whether or not the pair-wise distances between items in the data set should be computed. Arguments : numPrototypes : The number of prototypes that should be drawn from the data set. computeDistances : A boolean value indicating whether or not the pair-wise distances between items in the data set should be computed.","title":"__init__"},{"location":"api-documentation/#seqclupvlibrarydata_source","text":"This package contains all implementations of data sources that are used by the 'SeqClu' algorithm to request data at every tick.","title":"seqclupv.library.data_source"},{"location":"api-documentation/#seqclupvlibrarydata_sourcefake_data_source","text":"This module contains an implementation of a fake data source that feeds a random number of elements of a predefined data set to the 'SeqClu' algorithm at every tick.","title":"seqclupv.library.data_source.fake_data_source"},{"location":"api-documentation/#fakedatasource-objects","text":"class FakeDataSource(IFakeDataSource, IDataGenerator)","title":"FakeDataSource Objects"},{"location":"api-documentation/#combinegenerateddata","text":"| @staticmethod | combineGeneratedData(clusters: List[List[Union[ndarray, list]]], classes: List[Union[int, chr]], numPrototypes: int) -> tuple This method combines the data that were generated from multiple data sources into one data stream. Arguments : clusters : The logical clusters with all the different classes for all the data generators. classes : All the classes that should be present in the data provided by the data source. numPrototypes : The number of prototypes used in the 'SeqClu' algorithm. Returns : The class dictionary, indices, labels and pair-wise distances of the data, as well as the data itself","title":"combineGeneratedData"},{"location":"api-documentation/#actuallabels","text":"| @property | actualLabels() -> Optional[Dict[str, Union[chr, int]]] This property stores the correct labels of the data in the data source. Returns : The correct labels of the data in the data set.","title":"actualLabels"},{"location":"api-documentation/#classes","text":"| @property | classes() -> List[Union[chr, int]] This property stores all the classes that are present in the data source. Returns : All the classes that are present in the data set.","title":"classes"},{"location":"api-documentation/#currentindex","text":"| @property | currentIndex() -> int This property stores the current index of the data provided by the data source. Returns : An integer representing the current index of the data provided by the data source.","title":"currentIndex"},{"location":"api-documentation/#currenttick","text":"| @property | currentTick() -> int This property stores the current tick of the algorithm. Returns : An integer representing the current tick of the algorithm.","title":"currentTick"},{"location":"api-documentation/#data","text":"| @property | data() -> List[Union[ndarray, list]] This property stores the data provided by the data source. Returns : The data provided by the data source.","title":"data"},{"location":"api-documentation/#datasize","text":"| @property | dataSize() -> Optional[int] This property stores the amount of data that are provided by the data source. Returns : An integer representing the amount of data that are provided by the data source.","title":"dataSize"},{"location":"api-documentation/#datagenerators","text":"| @property | dataGenerators() -> List[IDataGenerator] This property stores the data generators that are used to generate the data provided by the data source. Returns : A list of data generators that are used to generate the data provided by the data source.","title":"dataGenerators"},{"location":"api-documentation/#maxpertick","text":"| @property | maxPerTick() -> int This property stores the maximum number of data that can be provided by the data source per tick. Returns : An integer representing the maximum number of data that can be provided by the data source per tick.","title":"maxPerTick"},{"location":"api-documentation/#numclasses","text":"| @property | numClasses() -> int The number of classes that are present in the data provided by the data source. Returns : An integer representing the number of classes that are present in the data provided by the data source.","title":"numClasses"},{"location":"api-documentation/#numprototypes","text":"| @property | numPrototypes() -> int The number of prototypes that are used in the 'SeqClu' algorithm. Returns : An integer representing the number of prototypes that are used in the 'SeqClu' algorithm.","title":"numPrototypes"},{"location":"api-documentation/#currentindex_1","text":"| @currentIndex.setter | currentIndex(value: int) -> None This is the setter for the 'currentIndex' property. Arguments : value : The value that the 'currentIndex' property needs to be set to. Returns : void","title":"currentIndex"},{"location":"api-documentation/#data_1","text":"| @data.setter | data(value: ndarray) -> None This is the setter for the 'data' property. Arguments : value : The value that the 'data' property needs to be set to. Returns : void","title":"data"},{"location":"api-documentation/#__init___5","text":"| __init__(maxPerTick: int, dataGenerators: List[IDataGenerator], numPrototypes: int, classes: List[Union[chr, int]]) -> None This method initializes the data source given the maximum number of data per tick, the data generators that should be used to generate the data provided by the data source and the number of prototypes that is used in the 'SeqClu' algorithm. Arguments : maxPerTick : The maximum number of data that can be provided by the data source per tick. dataGenerators : The data generators that should be used to generate the data provided by the data source. numPrototypes : The number of prototypes that is used in the 'SeqClu' algorithm. classes : All the classes that should be present in the data provided by the data source.","title":"__init__"},{"location":"api-documentation/#advancetick","text":"| advanceTick() -> List[Union[ndarray, list]] This method advances the state of the data source by one tick. The method returns a list of sequences that should be processed by the 'SeqClu' algorithm during the next tick. Returns : A list of sequences that should be processed by the 'SeqClu' algorithm during the next tick.","title":"advanceTick"},{"location":"api-documentation/#generatedata_4","text":"| generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences.","title":"generateData"},{"location":"api-documentation/#reset","text":"| reset() -> None This method sets the current index of the data provided by the data source back to zero to reset the data source. Returns : void","title":"reset"},{"location":"api-documentation/#seqclupvlibrarydistance","text":"This package contains implementations of distance measures that are used in the 'SeqClu' algorithm to compute the distance between two incoming data points.","title":"seqclupv.library.distance"},{"location":"api-documentation/#seqclupvlibrarydistancedynamic_time_warping","text":"This module contains an implementation of the 'Dynamic Time Warping' distance measure that is used in the 'SeqClu' algorithm to compute the distance between two sequences.","title":"seqclupv.library.distance.dynamic_time_warping"},{"location":"api-documentation/#dynamictimewarping-objects","text":"class DynamicTimeWarping(IDistanceMeasure)","title":"DynamicTimeWarping Objects"},{"location":"api-documentation/#timescalled","text":"| @property | timesCalled() -> int This property stores the counter on the amount of times that the distance measure is used to compute the distance between two sequences. Returns : An integer representing the counter on the amount of times that the distance measure is used to compute the distance between two sequences.","title":"timesCalled"},{"location":"api-documentation/#__init___6","text":"| __init__() -> None This method initializes the distance measure by setting the counter on the amount of times that the distance measure is used to compute the distance between two sequences to zero.","title":"__init__"},{"location":"api-documentation/#calculatedistance","text":"| calculateDistance(sequenceOne: ndarray, sequenceTwo: ndarray) -> float This method calculates the distance between two sequences. Arguments : sequenceOne : The first sequence for which the distance should be computed. sequenceTwo : The second sequence for which the distance should be computed. Returns : The distance between the two sequences.","title":"calculateDistance"},{"location":"api-documentation/#reset_1","text":"| reset() -> None This method resets the counter on the amount of times that the distance measure is used to compute the distance between two sequences. Returns : void","title":"reset"},{"location":"api-documentation/#seqclupvlibraryevaluation","text":"This package contains implementations of evaluators that can assess the performance of the variants of the 'SeqClu' algorithm.","title":"seqclupv.library.evaluation"},{"location":"api-documentation/#seqclupvlibraryevaluationbasic_baseline_prototypes","text":"This module contains the class that stores the prototypes of some baseline. This class can be used to compare the prototypes obtained at the end of the online 'Seqclu' algorithm, where the number of identical prototypes divided by the total number of prototypes can be used as evaluation metric.","title":"seqclupv.library.evaluation.basic_baseline_prototypes"},{"location":"api-documentation/#basicbaselineprototypes-objects","text":"class BasicBaselinePrototypes(IBaselinePrototypes)","title":"BasicBaselinePrototypes Objects"},{"location":"api-documentation/#getprototypes","text":"| @staticmethod | getPrototypes(experimentName: str) -> Optional[List[List[str]]] This method returns the prototypes that were obtained after executing some baseline algorithm. These prototypes can be compared to the prototypes obtained at the end of the online 'SeqClu' algorithm, where the number of identical prototypes divided by the total number of prototypes can be used as evaluation metric. Arguments : experimentName : The name of the experiment for which the prototypes need to be retrieved. Returns : The prototypes obtained after executing some experiment identified by the experiment name.","title":"getPrototypes"},{"location":"api-documentation/#seqclupvlibraryevaluationbasic_evaluator","text":"This module is an implementation of an evaluator that measures the accuracy of the results obtained from the 'SeqClu' algorithm as well as various other metrics such as the silhouette score, the number of distance computations that were made and the time taken to execute the algorithm.","title":"seqclupv.library.evaluation.basic_evaluator"},{"location":"api-documentation/#basicevaluator-objects","text":"class BasicEvaluator(IEvaluator)","title":"BasicEvaluator Objects"},{"location":"api-documentation/#actuallabels_1","text":"| @property | actualLabels() -> Dict[str, Union[chr, int]] This property stores the correct labels of the data processed by the 'SeqClu' algorithm in a dictionary where the keys are the hashes of the data. Returns : A dictionary where the keys are the hashes of the data and the values are the correct labels of the data processed by the 'SeqClu' algorithm.","title":"actualLabels"},{"location":"api-documentation/#baselineprototypes","text":"| @property | baselinePrototypes() -> Optional[List[List[str]]] This property stores the prototypes of the baseline that are used in the evaluator. Returns : The prototypes of the baseline that are used in the evaluator.","title":"baselinePrototypes"},{"location":"api-documentation/#fakedatasource","text":"| @property | fakeDataSource() -> FakeDataSource This property stores the fake data source that is used in the evaluator. Returns : The fake data source that is used in the evaluator.","title":"fakeDataSource"},{"location":"api-documentation/#distancemeasure","text":"| @property | distanceMeasure() -> DynamicTimeWarping This property stores the distance measure that is used in the 'SeqClu' algorithm. Returns : The distance measure that is used in the 'SeqClu' algorithm.","title":"distanceMeasure"},{"location":"api-documentation/#seqclu","text":"| @property | seqClu() -> Optional[SeqClu] This property stores the 'SeqClu' algorithm that is used in the evaluator. Returns : The 'SeqClu' algorithm that is used in the evaluator.","title":"seqClu"},{"location":"api-documentation/#seqclubaselineoffline","text":"| @property | seqCluBaselineOffline() -> Optional[SeqCluBaselineOffline] This property stores the offline baseline variant of the 'SeqClu' algorithm that is used in the evaluator. Returns : The offline baseline variant of the 'SeqClu' algorithm that is used in the evaluator.","title":"seqCluBaselineOffline"},{"location":"api-documentation/#seqclubaselineonline","text":"| @property | seqCluBaselineOnline() -> Optional[SeqCluBaselineOnline] This property stores the online baseline variant of the 'SeqClu' algorithm that is used in the evaluator. Returns : The online baseline variant of the 'SeqClu' algorithm that is used in the evaluator.","title":"seqCluBaselineOnline"},{"location":"api-documentation/#__init___7","text":"| __init__(fakeDataSource: FakeDataSource, distanceMeasure: DynamicTimeWarping, seqClu: Optional[SeqClu], seqCluBaselineOnline: Optional[SeqCluBaselineOnline], seqCluBaselineOffline: Optional[SeqCluBaselineOffline], baselinePrototypes: Optional[List[List[str]]]) -> None This method initializes the evaluator. Arguments : fakeDataSource : The fake data source that is used in the evaluator. distanceMeasure : The distance measure that is used in the 'SeqClu' algorithm. seqClu : The 'SeqClu' algorithm that is used in the evaluator. seqCluBaselineOnline : The online baseline variant of the 'SeqClu' algorithm that is used in the evaluator. seqCluBaselineOffline : The offline baseline variant of the 'SeqClu' algorithm that is used in the evaluator. baselinePrototypes : The prototypes of the baseline that are used in the evaluator. Returns : void","title":"__init__"},{"location":"api-documentation/#evaluate","text":"| evaluate() -> None This method evaluates the performance of the variants of the 'SeqClu' algorithm. Returns : void","title":"evaluate"},{"location":"api-documentation/#seqclupvlibraryheuristics","text":"This package contains implementations of heuristic functions that are used in variants of the 'SeqClu' algorithm.","title":"seqclupv.library.heuristics"},{"location":"api-documentation/#seqclupvlibraryheuristicslinear_prototype_value","text":"This module contains an implementation of a heuristic functions that are used in variants of the 'SeqClu' algorithm. The heuristic function calculates the value of a (candidate) prototype based on a linear combination of the representativeness and the weight of the (candidate) prototype.","title":"seqclupv.library.heuristics.linear_prototype_value"},{"location":"api-documentation/#linearprototypevalue-objects","text":"class LinearPrototypeValue(IPrototypeValue)","title":"LinearPrototypeValue Objects"},{"location":"api-documentation/#ratio","text":"| @property | ratio() -> float Returns the value 'a' in a:1 where a:1 is the ratio between the representativeness and the weight. Returns : The value 'a' in a:1 where a:1 is the ratio between the representativeness and the weight.","title":"ratio"},{"location":"api-documentation/#__init___8","text":"| __init__(ratio: float) -> None This method initializes the function that returns the linear combination of the representativeness and weight of a prototype. Arguments : ratio : The value 'a' in a:1 where a:1 is the ratio between the representativeness and the weight.","title":"__init__"},{"location":"api-documentation/#evaluate_1","text":"| evaluate(representativeness: float, weight: float) -> float This method evaluates the function that returns the linear combination of the representativeness and weight of some prototype. Arguments : representativeness : The representativeness of some prototype. weight : The weight of some prototype. Returns : The value of the prototype.","title":"evaluate"},{"location":"api-documentation/#seqclupvlibraryinterfaces","text":"This package contains all interfaces that are used in the 'SeqClu' framework.","title":"seqclupv.library.interfaces"},{"location":"api-documentation/#seqclupvlibraryinterfacesbaseline_prototypes","text":"This module contains the interface for the class that stores the prototypes of some baseline. This class can be used to compare the prototypes obtained at the end of the online 'Seqclu' algorithm, where the number of identical prototypes divided by the total number of prototypes can be used as evaluation metric.","title":"seqclupv.library.interfaces.baseline_prototypes"},{"location":"api-documentation/#ibaselineprototypes-objects","text":"class IBaselinePrototypes(ABC)","title":"IBaselinePrototypes Objects"},{"location":"api-documentation/#getprototypes_1","text":"| @staticmethod | @abstractmethod | getPrototypes(experimentName: str) -> Optional[List[List[str]]] This method returns the prototypes that were obtained after executing some baseline algorithm. These prototypes can be compared to the prototypes obtained at the end of the online 'SeqClu' algorithm, where the number of identical prototypes divided by the total number of prototypes can be used as evaluation metric. Arguments : experimentName : The name of the experiment for which the prototypes need to be retrieved. Returns : The prototypes obtained after executing some experiment identified by the experiment name.","title":"getPrototypes"},{"location":"api-documentation/#seqclupvlibraryinterfacescandidate_store","text":"This module contains an interface for the data structure that stores the candidate prototypes for all clusters that are maintained as part of the 'SeqClu' algorithm.","title":"seqclupv.library.interfaces.candidate_store"},{"location":"api-documentation/#icandidatestore-objects","text":"class ICandidateStore(ABC)","title":"ICandidateStore Objects"},{"location":"api-documentation/#candidates","text":"| @property | @abstractmethod | candidates() -> Dict[str, Tuple[ndarray, Set[int]]] This property returns the candidate prototypes along with the indices of the clusters that the sequences are candidates for that are stored in the candidate store. Returns : The candidate prototypes stored in the candidate store.","title":"candidates"},{"location":"api-documentation/#candidatehistory","text":"| @property | @abstractmethod | candidateHistory() -> Dict[str, int] This property returns a dictionary where the keys are the candidate hashes and the values are the ticks at which the candidate prototypes were last updated. Returns : A dictionary where the keys are the candidate hashes and the values are the ticks at which the candidate prototypes were last updated.","title":"candidateHistory"},{"location":"api-documentation/#lastupdate","text":"| @property | @abstractmethod | lastUpdate() -> int This property returns the tick at which the candidate store was last updated. Returns : An integer representing the tick at which the candidate store was last updated.","title":"lastUpdate"},{"location":"api-documentation/#addtocandidates","text":"| @abstractmethod | addToCandidates(candidate: ndarray, candidateFor: Set[int], tick: int) -> None This method adds a sequence to the candidate store for a set of clusters at a given tick. Arguments : candidate : The sequence that is added as a candidate to the candidate store. candidateFor : The set of clusters that the sequence is a candidate for. tick : The tick at which the candidate is added to the candidate store. Returns : void","title":"addToCandidates"},{"location":"api-documentation/#getcandidate","text":"| @abstractmethod | getCandidate(candidateHash: str) -> Tuple[ndarray, Set[int]] This method returns a candidate prototype given its hash along with the indices of the clusters that the sequence is a candidate for. Arguments : candidateHash : The hash of the candidate prototypes that needs to be returned along with the indices of the clusters that the sequence is a candidate for. Returns : The candidate prototype given its hash along with the indices of the clusters that the sequence is a candidate for.","title":"getCandidate"},{"location":"api-documentation/#lastupdatecandidate","text":"| @abstractmethod | lastUpdateCandidate(candidateHash: str) -> Optional[int] This method returns the tick at which the candidate was last updated. Arguments : candidateHash : The hash of the candidate for which the tick at which it was last updated needs to be returned. Returns : An integer representing the tick at which the candidate was last updated.","title":"lastUpdateCandidate"},{"location":"api-documentation/#removefromcandidates","text":"| @abstractmethod | removeFromCandidates(candidateHash: str) -> None This method removes a candidate, identified by its hash, from the candidate store. Arguments : candidateHash : The hash of the candidate that needs to be removed from the candidate store. Returns : void","title":"removeFromCandidates"},{"location":"api-documentation/#seqclupvlibraryinterfacesdata_generator","text":"This module contains an interface for classes that are responsible for generating data that is passed to the 'SeqClu' algorithm.","title":"seqclupv.library.interfaces.data_generator"},{"location":"api-documentation/#idatagenerator-objects","text":"class IDataGenerator(ABC)","title":"IDataGenerator Objects"},{"location":"api-documentation/#classes_1","text":"| @property | classes() -> Optional[chr] This property stores the identifiers of items that are present in the data set. Returns : A list of integers that represent the identifiers of the classes of the items that are present in the data set.","title":"classes"},{"location":"api-documentation/#classdictionary","text":"| @property | classDictionary() -> Dict[str, int] This property stores a mapping from class identifiers to indices. Returns : A dictionary in which the keys are the identifiers of the classes of the items that are present in the data set and the values are the indices of the classes that can be used to retrieve the data that belong to a given class from a two-dimensional list containing all items in the data set.","title":"classDictionary"},{"location":"api-documentation/#data_2","text":"| @property | data() -> Optional[List[ndarray]] This property stores the data in the data set. Returns : A list of sequences that are present in the data set.","title":"data"},{"location":"api-documentation/#distances","text":"| @property | distances() -> Optional[ndarray] This property stores the pair-wise distances of items in the data set. Returns : A two-dimensional array of pair-wise distances where indices i,j represent the indices of the two items in the list of sequences stored in the 'data' property.","title":"distances"},{"location":"api-documentation/#indices","text":"| @property | indices() -> Optional[List[int]] This property stores the indices of items in the data set. Returns : A list of indices of items in the data set.","title":"indices"},{"location":"api-documentation/#labels","text":"| @property | labels() -> Optional[List[chr]] This property stores the labels of items in the data set. Returns : A list of labels of items in the data set.","title":"labels"},{"location":"api-documentation/#numprototypes_1","text":"| @property | numPrototypes() -> int This property stores the number of prototypes that should be drawn from the data set. Returns : An integer representing the number of prototypes that should be drawn from the data set.","title":"numPrototypes"},{"location":"api-documentation/#generatedata_5","text":"| @abstractmethod | generateData() -> List[Union[ndarray, list]] This method generates a data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences. Returns : A data set that is used in the 'SeqClu' algorithm or one of its extensions as a list of sequences.","title":"generateData"},{"location":"api-documentation/#__init___9","text":"| __init__(numPrototypes: int) -> None This method initializes the properties of the class. Arguments : numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm. Returns : void","title":"__init__"},{"location":"api-documentation/#seqclupvlibraryinterfacesdata_source","text":"This module contains the interface for the data sources that are used by the 'SeqClu' algorithm to request data at every tick.","title":"seqclupv.library.interfaces.data_source"},{"location":"api-documentation/#idatasource-objects","text":"class IDataSource(ABC)","title":"IDataSource Objects"},{"location":"api-documentation/#classes_2","text":"| @property | @abstractmethod | classes() -> List[Union[chr, int]] This property stores all the classes that are present in the data source. Returns : All the classes that are present in the data set.","title":"classes"},{"location":"api-documentation/#advancetick_1","text":"| @abstractmethod | advanceTick() -> List[Union[ndarray, list]] This method advances the state of the data source by one tick. The method returns a list of sequences that should be processed by the 'SeqClu' algorithm during the next tick. Returns : A list of sequences that should be processed by the 'SeqClu' algorithm during the next tick.","title":"advanceTick"},{"location":"api-documentation/#seqclupvlibraryinterfacesdistance_measure","text":"This module contains an interface for the distance measures that are used to compute the distance between two data points in the 'SeqClu' algorithm.","title":"seqclupv.library.interfaces.distance_measure"},{"location":"api-documentation/#idistancemeasure-objects","text":"class IDistanceMeasure(ABC)","title":"IDistanceMeasure Objects"},{"location":"api-documentation/#calculatedistance_1","text":"| @abstractmethod | calculateDistance(sequenceOne: Union[ndarray, list], sequenceTwo: Union[ndarray, list]) -> float This method calculates the distance between two sequences. Arguments : sequenceOne : The first sequence for which the distance should be computed. sequenceTwo : The second sequence for which the distance should be computed. Returns : The distance between the two sequences.","title":"calculateDistance"},{"location":"api-documentation/#seqclupvlibraryinterfacesevaluator","text":"This module contains the interface for evaluators that can assess the performance of the variants of the 'SeqClu' algorithm.","title":"seqclupv.library.interfaces.evaluator"},{"location":"api-documentation/#ievaluator-objects","text":"class IEvaluator(ABC)","title":"IEvaluator Objects"},{"location":"api-documentation/#evaluate_2","text":"| @abstractmethod | evaluate() -> None This method evaluates the performance of the variants of the 'SeqClu' algorithm. Returns : void","title":"evaluate"},{"location":"api-documentation/#seqclupvlibraryinterfacesfake_data_source","text":"This module contains the interface for fake data sources that store a predefined data set that the 'SeqClu' algorithm can request data to process from.","title":"seqclupv.library.interfaces.fake_data_source"},{"location":"api-documentation/#ifakedatasource-objects","text":"class IFakeDataSource(IDataSource, ABC)","title":"IFakeDataSource Objects"},{"location":"api-documentation/#data_3","text":"| @property | @abstractmethod | data() -> List[Union[ndarray, list]] This property stores the data provided by the data source. Returns : The data provided by the data source.","title":"data"},{"location":"api-documentation/#numclasses_1","text":"| @property | @abstractmethod | numClasses() -> int The number of classes that are present in the data provided by the data source. Returns : An integer representing the number of classes that are present in the data provided by the data source.","title":"numClasses"},{"location":"api-documentation/#seqclupvlibraryinterfacesheuristics","text":"This package contains interfaces for heuristic functions that are used in variants of the 'SeqClu' algorithm.","title":"seqclupv.library.interfaces.heuristics"},{"location":"api-documentation/#seqclupvlibraryinterfacesheuristicsprototype_value","text":"This module contains the interface for a heuristic function that calculates the value of a (candidate) prototype given the representativeness and weight of the prototype.","title":"seqclupv.library.interfaces.heuristics.prototype_value"},{"location":"api-documentation/#iprototypevalue-objects","text":"class IPrototypeValue(ABC)","title":"IPrototypeValue Objects"},{"location":"api-documentation/#evaluate_3","text":"| @abstractmethod | evaluate(representativeness: float, weight: float) -> float This method evaluates the function that returns the linear combination of the representativeness and weight of some prototype. Arguments : representativeness : The representativeness of some prototype. weight : The weight of some prototype. Returns : The value of the prototype.","title":"evaluate"},{"location":"api-documentation/#seqclupvlibraryinterfacesseqclu","text":"This module contains an interface for the 'SeqClu' algorithm. Some methods are already implemented.","title":"seqclupv.library.interfaces.seqclu"},{"location":"api-documentation/#iseqclu-objects","text":"class ISeqClu(ABC)","title":"ISeqClu Objects"},{"location":"api-documentation/#classes_3","text":"| @property | classes() -> List[Union[chr, int]] This property stores the classes of the items that are present in the data set. Returns : The classes of the items that are present in the data set.","title":"classes"},{"location":"api-documentation/#datasource","text":"| @property | dataSource() -> IDataSource This property stores the data source that is used to retrieve data that need to be processed by the algorithm. Returns : The data source that is used to retrieve data that need to be processed by the algorithm.","title":"dataSource"},{"location":"api-documentation/#distancemeasure_1","text":"| @property | distanceMeasure() -> IDistanceMeasure This property stores the distance measure that is used to compute the distance between two sequences. Returns : The distance measure that is used to compute the distance between two sequences.","title":"distanceMeasure"},{"location":"api-documentation/#finallabels","text":"| @property | @abstractmethod | finalLabels() -> Dict[str, Union[chr, int]] This property stores the correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. Returns : The correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels.","title":"finalLabels"},{"location":"api-documentation/#finish","text":"| @property | finish() -> bool This property stores a boolean value indicating whether or not the algorithm finished executing. Returns : A boolean value indicating whether or not the algorithm finished executing.","title":"finish"},{"location":"api-documentation/#numclusters","text":"| @property | numClusters() -> int This property stores the number of clusters that are used in the 'SeqClu' algorithm. Returns : An integer representing the number of clusters that are used in the 'SeqClu' algorithm.","title":"numClusters"},{"location":"api-documentation/#numprototypes_2","text":"| @property | numPrototypes() -> int This property stores the number of prototypes that are used in the 'SeqClu' algorithm. Returns : An integer representing the number of prototypes that are used in the 'SeqClu' algorithm.","title":"numPrototypes"},{"location":"api-documentation/#tick","text":"| @property | tick() -> int This property stores the tick of the algorithm, which represents the moment in time relative to the start of the execution of the algorithm. Returns : An integer representing the tick of the algorithm, which represents the moment in time relative to the start of the execution of the algorithm.","title":"tick"},{"location":"api-documentation/#finish_1","text":"| @finish.setter | finish(value: bool) -> None This is the setter for the 'finish' property. Arguments : value : The value that the 'finish' property should be set to. Returns : void","title":"finish"},{"location":"api-documentation/#__init___10","text":"| __init__(dataSource: IDataSource, distanceMeasure: IDistanceMeasure, numClusters: int, numPrototypes: int) -> None This method initializes the 'SeqClu' algorithm with a data source, distance measure, number of clusters and number of prototypes. Arguments : dataSource : The data source that should be used in the 'SeqClu' algorithm. distanceMeasure : The distance measure that should be used in the 'SeqClu' algorithm. numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm. Returns : void","title":"__init__"},{"location":"api-documentation/#execute","text":"| @abstractmethod | execute() -> None This method executes the 'SeqClu' algorithm from start to finish. The main loop over the data is implemented in here. Returns : void","title":"execute"},{"location":"api-documentation/#processsequence","text":"| @abstractmethod | processSequence(sequence: Tuple[str, ndarray], considerCandidacy: bool) -> None This method processes one sequence of the data set that is processed in the 'SeqClu' algorithm. Arguments : sequence : The sequence that should be processed in the 'SeqClu' algorithm. considerCandidacy : A boolean value indicating whether or not the algorithm should consider if the sequence could be a prototype for any of the clusters. Returns : void","title":"processSequence"},{"location":"api-documentation/#seqclupvlibrarystorage","text":"This package contains classes that are responsible for storing information that is relevant to the clustering process that is part of the 'SeqClu' algorithm. The relevant information includes a set of candidate prototypes, a set of clusters and a set of prototypes for some cluster.","title":"seqclupv.library.storage"},{"location":"api-documentation/#seqclupvlibrarystoragecandidates","text":"This module contains a class called 'CandidateStore' that stores the candidate prototypes that are used in the 'SeqClu' algorithm.","title":"seqclupv.library.storage.candidates"},{"location":"api-documentation/#candidatestore-objects","text":"class CandidateStore(ICandidateStore)","title":"CandidateStore Objects"},{"location":"api-documentation/#candidates_1","text":"| @property | candidates() -> Dict[str, Tuple[ndarray, Set[int]]] This method is a property that returns the stored set of candidateStore. The candidateStore are stored in a dictionary where key is the hash of the candidate and the value is a tuple containing the candidate itself and a set of cluster identifiers for which this sequence is a candidate prototype. Returns : A dictionary where key is the hash of the candidate and the value is a tuple containing the candidate itself and a set of cluster identifiers for which this sequence is a candidate prototype.","title":"candidates"},{"location":"api-documentation/#candidatehistory_1","text":"| @property | candidateHistory() -> Dict[str, int] This method is a property that returns a dictionary where the key is the hash of some candidate and the value is the tick at which the candidate was added to the buffer. Returns : A dictionary where the key is the hash of some candidate and the value is the tick at which the candidate was added to the buffer.","title":"candidateHistory"},{"location":"api-documentation/#lastupdate_1","text":"| @property | lastUpdate() -> int This method is a property that returns the tick at which the buffer of candidateStore was last updated. Returns : The tick at which the buffer of candidateStore was last updated.","title":"lastUpdate"},{"location":"api-documentation/#__init___11","text":"| __init__(numRepresentativePrototypes: int, numPrototypes: int, tick: int) -> None This method initializes the buffer of candidateStore with a given number of representative prototypes, total number of prototypes, the maximum size of the buffer of candidateStore and the tick at which the buffer is initialized. Arguments : numRepresentativePrototypes : The number of representative prototypes. numPrototypes : The total number of prototypes. tick : The tick at which the buffer of candidateStore is initialized.","title":"__init__"},{"location":"api-documentation/#addtocandidates_1","text":"| addToCandidates(candidate: Tuple[Optional[str], Optional[ndarray]], candidateFor: Set[int], tick: int) -> None This method adds an incoming sequence to the buffer of candidateStore. Arguments : candidate : The incoming sequence that needs to be added to the buffer of candidateStore. candidateFor : The identifiers of the clusters that the incoming sequence is a candidate for. tick : The tick at which the incoming sequence is promoted to a candidate. Returns : void","title":"addToCandidates"},{"location":"api-documentation/#getcandidate_1","text":"| getCandidate(candidateHash: str) -> Tuple[ndarray, Set[int]] This method returns a candidate given its hash. Arguments : candidateHash : The hash of the candidate that is requested. Returns : A two-tuple containing the candidate itself and the identifiers of the clusters that the sequence is a candidate for.","title":"getCandidate"},{"location":"api-documentation/#lastupdatecandidate_1","text":"| lastUpdateCandidate(candidateHash: str) -> int This method returns the tick at which a candidate that is stored in the buffer was last updated. Arguments : candidateHash : The hash of the candidate for which the information about when the candidate was last updated is requested. Returns : The tick at which a candidate that is stored in the buffer was last updated.","title":"lastUpdateCandidate"},{"location":"api-documentation/#removefromcandidates_1","text":"| removeFromCandidates(candidateHash: str) -> None This method removes a sequence from the set of candidateStore. This occurs when the sequence is fully processed and either promoted to a prototype or discarded. Arguments : candidateHash : The hash of the candidate. Returns : void","title":"removeFromCandidates"},{"location":"api-documentation/#seqclupvlibrarystoragecluster","text":"This module contains an implementation of the data structure that stores all relevant information about one of the clusters that are maintained as part of the 'SeqClu' algorithm.","title":"seqclupv.library.storage.cluster"},{"location":"api-documentation/#clusterstore-objects","text":"class ClusterStore()","title":"ClusterStore Objects"},{"location":"api-documentation/#averagedistance","text":"| @property | averageDistance() -> float This property stores the average distance between any prototype and all other prototypes in the cluster. Returns : The average distance between any prototype and all other prototypes in the cluster.","title":"averageDistance"},{"location":"api-documentation/#averagedistancefromrepresentativetononrepresentative","text":"| @property | averageDistanceFromRepresentativeToNonRepresentative() -> float This property stores the average distance from representative prototypes to non-representative prototypes in the cluster. Returns : The average distance from representative prototypes to non-representative prototypes in the cluster.","title":"averageDistanceFromRepresentativeToNonRepresentative"},{"location":"api-documentation/#averagerepresentativeness","text":"| @property | averageRepresentativeness() -> float This property stores the average representativeness of prototypes in the cluster. Returns : The average representativeness of prototypes in the cluster.","title":"averageRepresentativeness"},{"location":"api-documentation/#averagesumofdistances","text":"| @property | averageSumOfDistances() -> float This property stores the average sum of distances between all pairs of prototypes in the cluster. Returns : The average sum of distances between all pairs of prototypes in the cluster.","title":"averageSumOfDistances"},{"location":"api-documentation/#distancemeasure_2","text":"| @property | distanceMeasure() -> IDistanceMeasure This property stores the distance measure that is used in the 'SeqClu' algorithm. Returns : The distance measure that is used in the 'SeqClu' algorithm.","title":"distanceMeasure"},{"location":"api-documentation/#distances_1","text":"| @property | distances() -> Dict[Tuple[str, str], float] This property stores the pair-wise distances between pairs of (candidate) prototypes. Returns : The pair-wise distances between pairs of (candidate) prototypes.","title":"distances"},{"location":"api-documentation/#error_1","text":"| @property | error() -> float This property stores the error that is made in every approximation of the distance from an incoming sequence to the cluster. Returns : The error that is made in every approximation of the distance from an incoming sequence to the cluster.","title":"error"},{"location":"api-documentation/#identifier","text":"| @property | identifier() -> int This property stores the identifier of the cluster. Returns : An integer representing the identifier of the cluster.","title":"identifier"},{"location":"api-documentation/#prototypes","text":"| @property | prototypes() -> PrototypeStore This property stores the prototypes of the cluster. Returns : The prototypes of the cluster.","title":"prototypes"},{"location":"api-documentation/#sumsofdistances","text":"| @property | sumsOfDistances() -> Dict[Tuple[str, bool], float] This property stores the sum of distances from a given prototype to all other prototypes in the cluster. Returns : The sum of distances from a given prototype to all other prototypes in the cluster.","title":"sumsOfDistances"},{"location":"api-documentation/#upperbound","text":"| @property | upperBound() -> float This property stores the upper bound of the distance between some incoming sequence and the cluster for the sequence to be considered as a candidate prototype. Returns : The upper bound of the distance between some incoming sequence and the cluster for the sequence to be considered as a candidate prototype.","title":"upperBound"},{"location":"api-documentation/#__init___12","text":"| __init__(identifier: int, numRepresentativePrototypes: int, numPrototypes: int, distanceMeasure: IDistanceMeasure, tick: int) -> None This method initializes the cluster given its identifier, the number of (representative) prototypes, the distance measure that should be used and the tick at which the cluster was initialized. Arguments : identifier : The identifier of the cluster. numRepresentativePrototypes : The number of representative prototypes. numPrototypes : The number of prototypes. distanceMeasure : The distance measure that should be used by the cluster. tick : The tick at which the cluster was initialized.","title":"__init__"},{"location":"api-documentation/#computeaveragedistance","text":"| computeAverageDistance(sequence: Tuple[Optional[str], Optional[ndarray]], representative: bool) -> float This method computes the average distance between some sequence and either the representative prototypes or all prototypes. Arguments : sequence : The sequence for which the average distance between itself and some set of prototypes needs to be computed. representative : A boolean value indicating whether or not the distance to the representative prototypes should be computed. If this value is false, the distance to all prototypes is computed instead. Returns : The average distance between the given sequence and either the representative prototypes or all prototypes.","title":"computeAverageDistance"},{"location":"api-documentation/#iscandidate","text":"| isCandidate(sequence: Tuple[Optional[str], Optional[ndarray]], minimumRepresentativeness: float, clusterAssignment: bool) -> Tuple[float, bool, bool] This method checks if a given sequence is a candidate prototype for the cluster. Arguments : sequence : The sequence for which needs to be checked whether or not it is a candidate to become a prototype for the cluster. minimumRepresentativeness : The minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. Returns : A tuple containing either the approximated or accurate distance from the sequence to the cluster, a boolean value indicating whether or not the sequence is a candidate prototype and whether or not the distance from the sequence to the cluster was approximated.","title":"isCandidate"},{"location":"api-documentation/#isrepresentativeenough","text":"| isRepresentativeEnough(minimumRepresentativeness: float) -> bool This method determines whether or not the representative prototypes of the cluster are representative enough. Arguments : minimumRepresentativeness : The minimum average representativeness the representative prototypes should have for them to be considered representative enough. Returns : A boolean value indicating whether or not the representative prototypes of the cluster are representative enough.","title":"isRepresentativeEnough"},{"location":"api-documentation/#pairwisedistanceof","text":"| pairwiseDistanceOf(sequenceOne: Tuple[Optional[str], Optional[ndarray]], sequenceTwo: Tuple[Optional[str], Optional[ndarray]]) -> float This method calculates the distance of two sequences. The result of this computation is memoized and if the distance is requested again at a later point in time, the calculation is not done again to save time. Arguments : sequenceOne : The first sequence for which the distance should be computed. sequenceTwo : The second sequence for which the distance should be computed. Returns : The computed distance between the two sequences.","title":"pairwiseDistanceOf"},{"location":"api-documentation/#processsequenceindefinitely","text":"| processSequenceIndefinitely(sequenceHash: str) -> None This method processes a sequence indefinitely, which means it is no longer a (candidate) prototype, but merely a sequence. As a result, all the stored information related to this sequence needs to be removed from the data structures that make up the cluster. This involves removing all pair-wise distances involving the sequence and removing the sequence from the data structure storing the sums of distances. Arguments : sequenceHash : The hash of the sequence that needs to be processed indefinitely. Returns : void","title":"processSequenceIndefinitely"},{"location":"api-documentation/#representativenessofsequence","text":"| representativenessOfSequence(sequence: Tuple[Optional[str], Optional[ndarray]]) -> float This method calculates the representativeness of a sequence relative to the prototypes of the cluster. Arguments : sequence : The sequence for which the representativeness should be calculated. Returns : A float value between 0 and 1 representing the representativeness of the sequence relative to the prototypes of the cluster.","title":"representativenessOfSequence"},{"location":"api-documentation/#sumofdistancesof","text":"| sumOfDistancesOf(sequence: Tuple[Optional[str], Optional[ndarray]], representative: bool) -> float This method computes the sum of distances between some sequence and either the representative prototypes or all prototypes. Arguments : sequence : The sequence for which the sum of distances to either the representative prototypes or all prototypes needs to be computed. representative : A boolean value indicating whether or not the distance to the representative prototypes should be computed. If this value is false, the distance to all prototypes is computed instead. Returns : The computed sum of distances. This sum of distances is also memoized such that it can be re-used at a later point in time.","title":"sumOfDistancesOf"},{"location":"api-documentation/#updateprototypes","text":"| updatePrototypes(newPrototypes: Dict[str, ndarray], newOtherPrototypeHashes: Set[str], newRepresentativePrototypeHashes: Set[str], tick: int) -> Set[str] This method updates the prototypes of the cluster. Arguments : newPrototypes : The new prototypes as a dictionary where the keys are the hashes of the new prototypes and the values are the prototypes itself. newOtherPrototypeHashes : The hashes of new non-representative prototypes. newRepresentativePrototypeHashes : The hashes of new representative prototypes. tick : The tick at which the prototypes are updated. Returns : The hashes of the prototypes that were removed.","title":"updatePrototypes"},{"location":"api-documentation/#seqclupvlibrarystorageprototypes","text":"This module contains a class called 'PrototypeStore' that is responsible for storing the prototypes of one of the clusters that is obtained as a result of executing the 'SeqClu' algorithm.","title":"seqclupv.library.storage.prototypes"},{"location":"api-documentation/#prototypestore-objects","text":"class PrototypeStore()","title":"PrototypeStore Objects"},{"location":"api-documentation/#fullyinitialized","text":"| @property | fullyInitialized() -> bool This method is a property that returns a boolean indicating whether or not the data structure has been initialized in full. Returns : A boolean indicating whether or not the data structure has been initialized in full.","title":"fullyInitialized"},{"location":"api-documentation/#lastupdate_2","text":"| @property | lastUpdate() -> int This method is a property that returns the tick at which the data structure of prototypes was last updated. Returns : The tick at which the data structure of prototypes was last updated.","title":"lastUpdate"},{"location":"api-documentation/#numrepresentativeprototypes","text":"| @property | numRepresentativePrototypes() -> int This method is a property that returns the number of representative prototypes of some cluster. Returns : The number of representative prototypes of the cluster.","title":"numRepresentativePrototypes"},{"location":"api-documentation/#numotherprototypes","text":"| @property | numOtherPrototypes() -> int This method is a property that returns the number of prototypes that are not representative prototypes of some cluster. Returns : The number of prototypes that are not representative prototypes of some cluster.","title":"numOtherPrototypes"},{"location":"api-documentation/#numprototypes_3","text":"| @property | numPrototypes() -> int This method is a property that returns the total number of prototypes of some cluster. Returns : The total number of prototypes of some cluster.","title":"numPrototypes"},{"location":"api-documentation/#otherprototypehashes","text":"| @property | otherPrototypeHashes() -> Set[str] This method is a property that returns the hashes of the prototypes that are not representative prototypes of some cluster. Returns : The hashes of the prototypes that are not representative prototypes of some cluster.","title":"otherPrototypeHashes"},{"location":"api-documentation/#prototypehistory","text":"| @property | prototypeHistory() -> Dict[str, int] This method is a property that returns a dictionary where the key is the hash of some prototype and the value is the tick at which the prototype was last updated. Returns : A dictionary where the key is the hash of some prototype and the value is the tick at which the prototype was last updated.","title":"prototypeHistory"},{"location":"api-documentation/#prototypes_1","text":"| @property | prototypes() -> Dict[str, ndarray] This method is a property that returns a dictionary where the key is the hash of some prototype and the value is the prototype itself. Returns : A dictionary where the key is the hash of some prototype and the value is the prototype itself.","title":"prototypes"},{"location":"api-documentation/#representativeprototypesinitialized","text":"| @property | representativePrototypesInitialized() -> bool This property stores a boolean value indicating whether or not the representative prototypes have been initialized. Returns : A boolean value indicating whether or not the representative prototypes have been initialized.","title":"representativePrototypesInitialized"},{"location":"api-documentation/#representativeprototypehashes","text":"| @property | representativePrototypeHashes() -> Set[str] This method is a property that returns the hashes of the prototypes that are representative prototypes of some cluster. Returns : The hashes of the prototypes that are representative prototypes of some cluster.","title":"representativePrototypeHashes"},{"location":"api-documentation/#updatingprototypes","text":"| @property | updatingPrototypes() -> bool This property stores a boolean value indicating whether or not the prototypes are currently being updated. Returns : A boolean value indicating whether or not the prototypes are currently being updated.","title":"updatingPrototypes"},{"location":"api-documentation/#__init___13","text":"| __init__(numRepresentativePrototypes: int, numPrototypes: int, tick: int) -> None This method initializes the 'PrototypeStore' class with a given number of representative prototypes, number of total prototypes and the tick at which the class is initialized. Arguments : numRepresentativePrototypes : The number of representative prototypes. numPrototypes : The total number of prototypes. tick : The tick at which the class is initialized. Returns : void","title":"__init__"},{"location":"api-documentation/#addprototype","text":"| addPrototype(prototype: Tuple[Optional[str], Optional[ndarray]], representative: bool, tick: int, toReplaceHash: Optional[str]) -> None This method adds a prototype to the set of prototypes that is stored in this class. Arguments : prototype : The sequence that needs to be added as prototype. representative : A boolean value indicating whether or not the sequence should become a representative prototype. tick : The tick at which the sequence is added to the set of prototypes that is stored in this class. toReplaceHash : An optional hash of the sequence that needs to be demoted to a regular sequence from a prototype. Returns : void","title":"addPrototype"},{"location":"api-documentation/#getprototype","text":"| getPrototype(prototypeHash: str) -> ndarray This method returns a prototype given the hash of this prototype. Arguments : prototypeHash : The hash of the prototype that is requested. Returns : The requested prototype.","title":"getPrototype"},{"location":"api-documentation/#lastupdateprototype","text":"| lastUpdatePrototype(prototypeHash: str) -> Optional[int] This method returns the tick at which some prototype was last updated given the hash of this prototype. Arguments : prototypeHash : The hash of the prototype for which information about when it was last updated is requested. Returns : The tick at which the prototype corresponding to the given hash was last updated.","title":"lastUpdatePrototype"},{"location":"api-documentation/#updateprototypes_1","text":"| updatePrototypes(newPrototypes: Dict[str, ndarray], newOtherPrototypeHashes: Set[str], newRepresentativePrototypeHashes: Set[str], tick: int) -> Set[str] This method updates the prototypes stored in the prototype store. Arguments : newPrototypes : The new prototypes as a dictionary where the keys are the hashes of the new prototypes and the values are the prototypes itself. newOtherPrototypeHashes : The hashes of new non-representative prototypes. newRepresentativePrototypeHashes : The hashes of new representative prototypes. tick : The tick at which the prototypes are updated. Returns : The hashes of the prototypes that were removed.","title":"updatePrototypes"},{"location":"api-documentation/#seqclupvlibrarystorageprototype_frequencies","text":"This module contains an implementation of a data structure that stores how often a prototype has been observed to be the closest to one of the prototypes of that cluster.","title":"seqclupv.library.storage.prototype_frequencies"},{"location":"api-documentation/#prototypefrequencystore-objects","text":"class PrototypeFrequencyStore()","title":"PrototypeFrequencyStore Objects"},{"location":"api-documentation/#computesumofdistances","text":"| @staticmethod | computeSumOfDistances(prototypeHashes: Set[str], distances: Dict[Tuple[str, str], float]) -> float This method computes the sum of distances between all pairs of prototypes identified by a set of prototype hashes given a dictionary of pair-wise distances. Arguments : prototypeHashes : The hashes of the prototypes for which the sum of pair-wise distances needs to be computed. distances : The pair-wise distances stored in a dictionary identified by a tuple of prototype hashes that identify the two prototypes. Returns : The sum of distances for the given prototypes and dictionary of distances.","title":"computeSumOfDistances"},{"location":"api-documentation/#frequencies","text":"| @property | frequencies() -> Dict[str, Optional[int]] This property stores the amount of times a prototype has been observed as being closest to an incoming sequence as a dictionary where the keys are the hashes of the prototypes. Returns : A dictionary where the keys are the hashes of the prototypes and the values are the amounts of times a prototype has been observed as being closest to an incoming sequence.","title":"frequencies"},{"location":"api-documentation/#numprototypes_4","text":"| @property | numPrototypes() -> int This property stores the number of prototypes that will be used in the 'SeqClu' algorithm. Returns : An integer representing the number of prototypes that will be used in the 'SeqClu' algorithm.","title":"numPrototypes"},{"location":"api-documentation/#totalobservations","text":"| @property | totalObservations() -> int This property stores the total number of observations that was made. Returns : An integer representing the total number of observations that was made.","title":"totalObservations"},{"location":"api-documentation/#__init___14","text":"| __init__(numPrototypes: int) -> None This method initializes the data structure storing information about the prototype frequencies. Arguments : numPrototypes : The number of prototypes that will be used in the 'SeqClu' algorithm.","title":"__init__"},{"location":"api-documentation/#closestprototypeobserved","text":"| closestPrototypeObserved(prototypeHash: str, numVotes: int) -> None This method adds a given amount of votes to the amount of votes that a prototype already has. Arguments : prototypeHash : The hash of the prototype that should get votes. numVotes : The number of votes that the prototype should get. Returns : void","title":"closestPrototypeObserved"},{"location":"api-documentation/#getweight","text":"| getWeight(prototypeHash: str) -> float This method calculates the weight of a prototype, identified by its hash, and returns this value. Arguments : prototypeHash : The hash of the prototype for which the weight needs to be calculated and returned. Returns : The weight of the prototype identified by its hash.","title":"getWeight"},{"location":"api-documentation/#initializeprototype","text":"| initializePrototype(prototypeHash: str) -> None This method initializes a prototype given its hash. Arguments : prototypeHash : The hash of the prototype for which an entry needs to be added to the prototype frequencies data structure. Returns : void","title":"initializePrototype"},{"location":"api-documentation/#updateprototypes_2","text":"| updatePrototypes(newPrototypeHashes: Set[str], addedPrototypeHashes: Set[str], removedPrototypeHashes: Set[str], distances: Dict[Tuple[str, str], float]) -> None This method updates the prototypes that are stored in the prototype frequencies store given sets of updated prototype hashes, newly added prototype hashes and rmeoved prototype hashes, as well as a dictionary of pair-wise distances for all pairs of prototypes, regardless of whether or not these prototypes are discarded. Arguments : newPrototypeHashes : The hashes of the updated prototypes. addedPrototypeHashes : The hashes of the newly dded prototypes. removedPrototypeHashes : The hashes of the removed prototypes. distances : The pair-wise distances for all pairs of prototypes, regardless of whether or not these prototypes are discarded. Returns : void","title":"updatePrototypes"},{"location":"api-documentation/#seqclupvlibrarystoragesequences","text":"This module contains a class called 'SequenceStore' that stores the ambiguous sequence that have yet to be clustered in the 'SeqClu' algorithm.","title":"seqclupv.library.storage.sequences"},{"location":"api-documentation/#sequencestore-objects","text":"class SequenceStore()","title":"SequenceStore Objects"},{"location":"api-documentation/#sequences","text":"| @property | sequences() -> Dict[str, ndarray] This method is a property that returns the stored set of ambiguous sequenceStore. The sequenceStore are stored in a dictionary where key is the hash of the sequence and the value is the sequence itself. Returns : A dictionary where key is the hash of the sequence and the value is the sequence itself.","title":"sequences"},{"location":"api-documentation/#sequencehistory","text":"| @property | sequenceHistory() -> Dict[str, int] This method is a property that returns a dictionary where the key is the hash of some sequence and the value is the tick at which the sequence was added to the buffer. Returns : A dictionary where the key is the hash of some sequence and the value is the tick at which the sequence was added to the buffer.","title":"sequenceHistory"},{"location":"api-documentation/#lastupdate_3","text":"| @property | lastUpdate() -> int This method is a property that returns the tick at which the buffer of sequenceStore was last updated. Returns : The tick at which the buffer of sequenceStore was last updated.","title":"lastUpdate"},{"location":"api-documentation/#__init___15","text":"| __init__(tick: int) -> None This method initializes the buffer of sequenceStore with a given tick at which the buffer is initialized. Arguments : tick : The tick at which the buffer of sequenceStore is initialized.","title":"__init__"},{"location":"api-documentation/#addtosequences","text":"| addToSequences(sequence: ndarray, tick: int) -> None This method adds an incoming sequence to the buffer of sequenceStore. Arguments : sequence : The incoming sequence that needs to be added to the buffer of sequenceStore. tick : The tick at which the incoming sequence is promoted to a sequence. Returns : void","title":"addToSequences"},{"location":"api-documentation/#getsequence","text":"| getSequence(sequenceHash: str) -> ndarray This method returns a sequence given its hash. Arguments : sequenceHash : The hash of the sequence that is requested. Returns : The requested sequence.","title":"getSequence"},{"location":"api-documentation/#lastupdatesequence","text":"| lastUpdateSequence(sequenceHash: str) -> int This method returns the tick at which a sequence that is stored in the buffer was last updated. Arguments : sequenceHash : The hash of the sequence for which the information about when the sequence was last updated is requested. Returns : The tick at which a sequence that is stored in the buffer was last updated.","title":"lastUpdateSequence"},{"location":"api-documentation/#removefromsequences","text":"| removeFromSequences(sequenceHash: str) -> None This method removes a sequence from the set of sequenceStore. This occurs when the sequence is fully processed and discarded. Arguments : sequenceHash : The hash of the sequence. Returns : void","title":"removeFromSequences"},{"location":"api-documentation/#seqclupvlibraryutilities","text":"This package contains utility methods that are used throughout the 'SeqClu' framework.","title":"seqclupv.library.utilities"},{"location":"api-documentation/#seqclupvlibraryutilitiescalculate_f1_score","text":"This module contains a method that calculates the F1-score given sets of true labels and predicted labels.","title":"seqclupv.library.utilities.calculate_f1_score"},{"location":"api-documentation/#calculate_f1_score","text":"calculate_f1_score(trueLabels: Dict[str, Union[chr, int]], predictedLabels: Dict[str, Union[chr, int]], average: str) -> float This method calculates the F1-score given a set of true labels and predicted labels as well as the averaging procedure that decides the type of F1-score. Arguments : trueLabels : The correct labels of the data as a dictionary where the keys are the hashes of the sequences and the values are the labels. predictedLabels : The predicted labels of the data as a dictionary where the keys are the hashes of the sequences and the values are the labels. average : The averaging procedure used in the statistical test. The averaging procedure decides the type of F1-score, this can be the micro, macro or weighted F1-score. Returns : The F1-score for the given sets of true labels and predicted labels.","title":"calculate_f1_score"},{"location":"api-documentation/#seqclupvlibraryutilitiesconstruct_stream","text":"This module contains a method that constructs a data stream of sequenceStore from a given set of clusters, classes and number of prototypes.","title":"seqclupv.library.utilities.construct_stream"},{"location":"api-documentation/#constructstream","text":"constructStream(clusters: List[List[Union[ndarray, list]]], classes: List[Union[int, chr]], numPrototypes: int) -> Tuple[Stream, Stream] This method constructs a data stream of sequenceStore from a given set of clusters, classes and number of prototypes. Arguments : clusters : The set of clusters that needs to be clustered by some clustering algorithm. classes : The identifier of the classes that belong to the clusters that were passed to this method. numPrototypes : The number of prototypes that will be used in the clustering algorithm. Returns : A two-tuple where the first item is the complete stream and the second item is a stream of sequences from any of the clusters that are not prototypes where the order of sequenceStore is randomized.","title":"constructStream"},{"location":"api-documentation/#seqclupvlibraryutilitieshash_filter","text":"This module contains a method that checks if some hash is part of a key that is a tuple of two hashes.","title":"seqclupv.library.utilities.hash_filter"},{"location":"api-documentation/#ishashinkey","text":"isHashInKey(key: Tuple[str, str], sequenceHash: str) -> bool This method checks if some hash is part of a key that is a tuple of two hashes. Arguments : key : A key that is a tuple of two hashes. sequenceHash : The hash that needs to be compared to the key. Returns : A boolean value indicating whether or not the incoming hash is part of the key.","title":"isHashInKey"},{"location":"api-documentation/#seqclupvlibraryutilitieshash_sequence","text":"This module contains a method that hashes an incoming sequence using the Python package 'xxhash'.","title":"seqclupv.library.utilities.hash_sequence"},{"location":"api-documentation/#hashsequence","text":"hashSequence(sequence: ndarray) -> str This method hashes an incoming sequence using the Python package 'xxhash'. Arguments : sequence : The incoming sequence that needs to be hashed. Returns : The hash of the incoming sequence.","title":"hashSequence"},{"location":"api-documentation/#seqclupvlibraryutilitiesstatistical_testing","text":"This module contains a command-line interface for carrying out a statistical test on two provided samples of data. The function to carry out a statistical test on two provided samples is contained in this module as well.","title":"seqclupv.library.utilities.statistical_testing"},{"location":"api-documentation/#statistical_test","text":"statistical_test(sampleOne: ndarray, sampleTwo: ndarray, testName: str) -> None This method carries out some statistical test, identified by its name, on two given samples. Arguments : sampleOne : The first sample that should be used in the statistical test. sampleTwo : The second sample that should be used in the statistical test. testName : The name of the statistical test that should be used. Returns : void","title":"statistical_test"},{"location":"api-documentation/#main","text":"main(argv: List[str]) -> None This method is the command-line interface for the statistical test program. Arguments : argv : The arguments that are passed to the statistical test program. Returns : void","title":"main"},{"location":"api-documentation/#seqclupvlibraryvisualization","text":"This module contains classes that bundle several approaches to visualize the results of the variations of the 'SeqClu' algorithm that are contained in the package.","title":"seqclupv.library.visualization"},{"location":"api-documentation/#seqclupvlibraryvisualizationvisualizer","text":"This module contains a class that bundles several approaches to visualize the results of the variations of the 'SeqClu' algorithm that are contained in the package. NOTE: This class has actually never been used during the research project and therefore needs major modifications to make it compatible with the rest of the framework.","title":"seqclupv.library.visualization.visualizer"},{"location":"api-documentation/#visualizer-objects","text":"class Visualizer()","title":"Visualizer Objects"},{"location":"api-documentation/#visualizeinputdata","text":"| visualizeInputData() -> None This method visualizes the input data in two dimensions. Returns : void","title":"visualizeInputData"},{"location":"api-documentation/#visualizeclustersastsne","text":"| visualizeClustersAsTSNE() -> None This method visualizes the clusters as TSNE-graphs. Returns : void","title":"visualizeClustersAsTSNE"},{"location":"api-documentation/#visualizeclustersasheatmaps","text":"| visualizeClustersAsHeatMaps() -> None This method visualizes the clusters as heatmaps. Returns : void","title":"visualizeClustersAsHeatMaps"},{"location":"api-documentation/#simulateclusteringprocess","text":"| simulateClusteringProcess() -> None This method makes multiple plots that replay the clustering process step-by-step. Returns : void","title":"simulateClusteringProcess"},{"location":"api-documentation/#seqclupvseqclu","text":"This class can be used to process a stream of data in a separate thread while some other thread performs work. The data stream is clustered using the 'SeqClu' algorithm and the labels of items that have already been seen can be requested real-time.","title":"seqclupv.SeqClu"},{"location":"api-documentation/#seqclu-objects","text":"class SeqClu(ISeqClu)","title":"SeqClu Objects"},{"location":"api-documentation/#assigntocluster","text":"| @staticmethod | assignToCluster(clusters: List[ClusterStore], sequence: Tuple[Optional[str], Optional[ndarray]], distances: List[Tuple[int, float, float]], clusterAssignment: bool) -> Tuple[int, bool] This method assigns a sequence to one of the provided clusters using a dictionary of pair-wise distances. Arguments : clusters : The clusters that the sequence can be assigned to. sequence : The sequence that needs to be assigned to one of the clusters. distances : The pair-wise distances stored in a dictionary identified by a tuple of prototype hashes that identify the two prototypes. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. Returns : A tuple containing the index of the cluster that the sequence was assigned to and a boolean value indicating whether or not the distances used to make the cluster assignment decision were approximated.","title":"assignToCluster"},{"location":"api-documentation/#assigntoclusteraccurate","text":"| @staticmethod | assignToClusterAccurate(clusters: List[ClusterStore], sequence: Tuple[Optional[str], Optional[ndarray]]) -> int This method assigns a sequence to one of the provided clusters using accurate distances. Arguments : clusters : The clusters that the sequence can be assigned to. sequence : The sequence that needs to be assigned to one of the clusters. Returns : The index of the cluster that the sequence was assigned to.","title":"assignToClusterAccurate"},{"location":"api-documentation/#computedistancetoclusters","text":"| @staticmethod | computeDistanceToClusters(clusters: List[ClusterStore], sequence: Tuple[Optional[str], Optional[ndarray]], clusterAssignment: bool) -> List[Tuple[int, float, float]] This method computes the distance of a sequence to all clusters. Arguments : clusters : The clusters for which the distance to the sequence needs to be computed. sequence : The sequence for which the distance to the clusters needs to be computed. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. Returns : A list of tuples containing the index of a cluster, the computed distance and the error made in this computation. For accurate distances, this error is 0.","title":"computeDistanceToClusters"},{"location":"api-documentation/#determinecandidacy","text":"| @staticmethod | determineCandidacy(candidates: CandidateStore, clusters: List[ClusterStore], sequence: Tuple[Optional[str], Optional[ndarray]], minimumRepresentativeness: float, clusterAssignment: bool) -> Tuple[List[Tuple[int, float, float]], Set[int]] This method determines for which clusters a given sequence is a candidate. Arguments : candidates : The buffer of candidate prototypes. clusters : The clusters that the given sequence could become a prototype for. sequence : The sequence for which needs to be determined whether or not it is a candidate to become a prototype for the clusters. minimumRepresentativeness : The minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. Returns : A tuple containing a list of tuples that each contain the index of some cluster, the computed distance and the error made in this computation, as well as the indices of the clusters that the sequence is a candidate for.","title":"determineCandidacy"},{"location":"api-documentation/#initializeclusters","text":"| @staticmethod | initializeClusters(numClusters: int, numRepresentativePrototypes: int, numPrototypes: int, distanceMeasure: IDistanceMeasure, tick: int) -> List[ClusterStore] This method initializes the clusters that are used in the algorithm. Arguments : numClusters : The number of clusters that need to be initialized. numRepresentativePrototypes : The number of representative prototypes each cluster needs to have. numPrototypes : The number of prototypes each cluster needs to have. distanceMeasure : The distance measure that is used in the algorithm. tick : The tick at which the clusters are initialized. Returns : The resulting list of initialized clusters.","title":"initializeClusters"},{"location":"api-documentation/#isambiguous","text":"| @staticmethod | isAmbiguous(distanceAndErrorOne: Tuple[float, float], distanceAndErrorTwo: Tuple[float, float]) -> bool This method determines whether or not two computed distances given their errors are relatively too close to each other and are therefore ambiguous. Arguments : distanceAndErrorOne : The distance and error that resulted from some distance computation. distanceAndErrorTwo : The distance and error that resulted from another distance computation. Returns : A boolean value indicating whether or not the pair of distance computations is ambiguous.","title":"isAmbiguous"},{"location":"api-documentation/#processcandidatesforcluster","text":"| @staticmethod | processCandidatesForCluster(cluster: ClusterStore, candidates: List[Tuple[str, ndarray]], numPrototypes: int, numRepresentativePrototypes: int, prototypeValue: IPrototypeValue, tick: int) -> Set[str] This method processes the candidate prototypes for a given cluster. The method decides whether or not the candidates are actually of high enough quality to become a prototype and if so, promotes these sequences to prototypes. Arguments : cluster : The cluster for which the candidate prototypes should be processed. candidates : The candidate prototypes that should be processed. numPrototypes : The number of prototypes of all clusters. numRepresentativePrototypes : The number of representative prototypes of all clusters. prototypeValue : The heuristic function that is used to compute the value of a prototype. tick : The tick at which the candidate prototypes were processed. Returns : The hashes of the prototypes that were discarded after processing all candidate prototypes.","title":"processCandidatesForCluster"},{"location":"api-documentation/#bufferedsequences","text":"| @property | bufferedSequences() -> Set[str] This property stores the sequences that were buffered by the algorithm. Returns : The set of sequences that were buffered by the algorithm.","title":"bufferedSequences"},{"location":"api-documentation/#buffering","text":"| @property | buffering() -> bool This property stores a boolean value indicating whether or not the buffering feature is enabled. Returns : A boolean value indicating whether or not the buffering feature is enabled.","title":"buffering"},{"location":"api-documentation/#bufferfull","text":"| @property | bufferFull() -> bool This method is a property that returns a boolean indicating whether or not the set of candidateStore has reached the maximum allowed size and is therefore full. Returns : A boolean indicating whether or not the set of candidateStore has reached the maximum allowed size and is therefore full.","title":"bufferFull"},{"location":"api-documentation/#buffersize","text":"| @property | bufferSize() -> int This method is a property that returns the maximum size of the buffer of candidateStore and ambiguous sequenceStore. Returns : The maximum size of the buffer of candidateStore and ambiguous sequenceStore.","title":"bufferSize"},{"location":"api-documentation/#candidatestore","text":"| @property | candidateStore() -> CandidateStore This property stores the buffer of candidate prototypes. Returns : The buffer of candidate prototypes.","title":"candidateStore"},{"location":"api-documentation/#classes_4","text":"| @property | classes() -> List[Union[chr, int]] Tis property stores the classes that are present in the data set that is processed by the algorithm. Returns : The classes that are present in the data set that is processed by the algorithm.","title":"classes"},{"location":"api-documentation/#clusterassignment","text":"| @property | clusterAssignment() -> bool This property stores a boolean value indicating whether or not approximation of the distance to clusters is enabled in the algorithm. Returns : A boolean value indicating whether or not approximation of the distance to clusters is enabled in the algorithm.","title":"clusterAssignment"},{"location":"api-documentation/#clusteredbyapproximation","text":"| @property | clusteredByApproximation() -> Set[str] This property stores the sequences that were clustered by approximation by the algorithm. Returns : The set of sequences that were clustered by approximation by the algorithm.","title":"clusteredByApproximation"},{"location":"api-documentation/#clusters","text":"| @property | clusters() -> List[ClusterStore] This property stores the clusters that the algorithm needs to work with. Returns : The clusters that the algorithm needs to work with.","title":"clusters"},{"location":"api-documentation/#finallabels_1","text":"| @property | finalLabels() -> Dict[str, int] This property stores the correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. Returns : The correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels.","title":"finalLabels"},{"location":"api-documentation/#fullyinitialized_1","text":"| @property | fullyInitialized() -> bool This property stores a boolean value indicating whether or not the prototypes of all clusters are fully initialized. Returns : A boolean value indicating whether or not the prototypes of all clusters are fully initialized.","title":"fullyInitialized"},{"location":"api-documentation/#labels_1","text":"| @property | labels() -> Dict[str, int] This property stores the predicted labels of all sequences except for those that are prototypes. Returns : The predicted labels of all sequences except for those that are prototypes.","title":"labels"},{"location":"api-documentation/#minimumrepresentativeness","text":"| @property | minimumRepresentativeness() -> float This property stores the minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. Returns : The minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead.","title":"minimumRepresentativeness"},{"location":"api-documentation/#numfullyprocessed","text":"| @property | numFullyProcessed() -> int This property stores the number of sequences that were fully processed by the algorithm. Returns : An integer representing the number of sequences that were fully processed by the algorithm.","title":"numFullyProcessed"},{"location":"api-documentation/#numrepresentativeprototypes_1","text":"| @property | numRepresentativePrototypes() -> int This property stores the number of representative prototypes of all clusters that are used by the algorithm. Returns : An integer representing the number of representative prototypes of all clusters that are used by the algorithm.","title":"numRepresentativePrototypes"},{"location":"api-documentation/#prototypevalueheuristic","text":"| @property | prototypeValueHeuristic() -> IPrototypeValue This property stores the heuristic function that is used to compute the value of a prototype. Returns : The heuristic function that is used to compute the value of a prototype.","title":"prototypeValueHeuristic"},{"location":"api-documentation/#sequencestore","text":"| @property | sequenceStore() -> SequenceStore This property stores the buffer of sequences that is currently not used in the algorithm, but could be used in the future to store sequences that are likely to be assigned incorrectly. Returns : The buffer of sequences that is currently not used in the algorithm, but could be used in the future to store sequences that are likely to be assigned incorrectly.","title":"sequenceStore"},{"location":"api-documentation/#__init___16","text":"| __init__(dataSource: IDataSource, distanceMeasure: IDistanceMeasure, numClusters: int, numRepresentativePrototypes: int, numPrototypes: int, bufferSize: int, minimumRepresentativeness: float, prototypeValueHeuristic: IPrototypeValue, clusterAssignment: bool, buffering: bool) -> None This method initializes the 'SeqClu' algorithm with a data source, distance measure, number of clusters and number of prototypes. Arguments : dataSource : The data source that should be used in the 'SeqClu' algorithm. distanceMeasure : The distance measure that should be used in the 'SeqClu' algorithm. numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numRepresentativePrototypes : The number of representative prototypes. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm.' bufferSize : The maximum size of the buffer. minimumRepresentativeness : The minimum representativeness that the prototypes should have in order for approximation of the distance to the cluster to be used. If the prototypes are not representative enough, the accurate distance to the cluster is computed instead. prototypeValueHeuristic : The heuristic function that is used to compute the value of a prototype. clusterAssignment : A boolean value indicating whether or not to approximate the distance to the cluster. buffering : A boolean value indicating whether or not the buffering feature should be used. Returns : void","title":"__init__"},{"location":"api-documentation/#alreadyprocessed","text":"| alreadyProcessed(sequenceHash: str) -> bool This method determines if a sequence, identified by its hash, was already processed in the past. Arguments : sequenceHash : The hash of the sequence for which needs to be determined whether or not it was already processed in the past. Returns : A boolean value indicating whether or not the sequence was already processed in the past.","title":"alreadyProcessed"},{"location":"api-documentation/#execute_1","text":"| execute() -> None This method executes the 'SeqClu' algorithm from start to finish. The main loop over the data is implemented in here. Returns : void","title":"execute"},{"location":"api-documentation/#forceprocessbuffer","text":"| forceProcessBuffer(persist: bool, tick: int) -> List[ClusterStore] This method forcefully processes the buffer of candidate prototypes. The buffer is then empty again and can fill up over time in the ticks that are to come. Arguments : persist : A boolean value indicating whether or not to persist this action. If this value is set to false, the resulting list of clusters is returned, but all other data structures remain the same as before executing this method. tick : The tick at which the buffer is forcefully processed. Returns : The clusters that are obtained after forcefully processing the buffer.","title":"forceProcessBuffer"},{"location":"api-documentation/#processsequence_1","text":"| processSequence(sequence: Tuple[str, ndarray], considerCandidacy: bool) -> None This method processes one sequence of the data set that is processed in the 'SeqClu' algorithm. Arguments : sequence : The sequence that should be processed in the 'SeqClu' algorithm. considerCandidacy : A boolean value indicating whether or not the algorithm should consider if the sequence could be a prototype for any of the clusters. Returns : void","title":"processSequence"},{"location":"api-documentation/#seqclupvseqclubaselineoffline","text":"This module contains an implementation of the offline version of the 'SeqClu' algorithm that is based on Partitioning Around Medoids (PAM).","title":"seqclupv.SeqCluBaselineOffline"},{"location":"api-documentation/#seqclubaselineoffline-objects","text":"class SeqCluBaselineOffline(ISeqClu)","title":"SeqCluBaselineOffline Objects"},{"location":"api-documentation/#initializeclusters_1","text":"| @staticmethod | initializeClusters(numClusters: int, numPrototypes: int) -> ndarray This method initializes the clusters of the 'SeqClu' algorithm given a number of clusters and prototypes. Arguments : numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm.' Returns : The indices of the prototypes for all the clusters, stored in a two-dimensional array.","title":"initializeClusters"},{"location":"api-documentation/#currentconfigurationcost","text":"| @property | currentConfigurationCost() -> float This property stores the cost of the current configuration. Returns : A float representing the cost of the current configuration.","title":"currentConfigurationCost"},{"location":"api-documentation/#data_4","text":"| @property | data() -> List[ndarray] This property stores the data that are processed by the 'SeqClu' algorithm. Returns : The data that are processed by the 'SeqClu' algorithm.","title":"data"},{"location":"api-documentation/#datasize_1","text":"| @property | dataSize() -> int This property stores the number of sequences that the data set contains. Returns : An integer representing the number of sequences that the data set contains.","title":"dataSize"},{"location":"api-documentation/#distances_2","text":"| @property | distances() -> ndarray This property stores the pair-wise distances for all pairs of sequences in the data set that is processed by the 'SeqClu' algorithm. Returns : A two-dimensional array that contains the pair-wise distances for all pairs of sequences in the data set that is processed by the 'SeqClu' algorithm.","title":"distances"},{"location":"api-documentation/#clusters_1","text":"| @property | clusters() -> ndarray This property stores the current configuration as a two-dimensional array containing the indices of the prototypes for every cluster. Returns : The current configuration as a two-dimensional array containing the indices of the prototypes for every cluster.","title":"clusters"},{"location":"api-documentation/#finallabels_2","text":"| @property | finalLabels() -> Tuple[ndarray, Dict[str, int]] This property stores the correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. Returns : The correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels.","title":"finalLabels"},{"location":"api-documentation/#labels_2","text":"| @property | labels() -> ndarray This property stores the labels of all sequences that are not prototypes in the 'SeqClu' algorithm. Returns : The labels of all sequences that are not prototypes in the 'SeqClu' algorithm.","title":"labels"},{"location":"api-documentation/#maxticks","text":"| @property | maxTicks() -> int This property stores the maximum number of ticks the algorithm is allowed to execute. Returns : An integer representing the maximum number of ticks the algorithm is allowed to execute.","title":"maxTicks"},{"location":"api-documentation/#time","text":"| @property | time() -> float This property stores the time it took the algorithm to initialize itself. Returns : A float representing the number of seconds it took the algorithm to initialize itself.","title":"time"},{"location":"api-documentation/#__init___17","text":"| __init__(fakeDataSource: FakeDataSource, distanceMeasure: IDistanceMeasure, numClusters: int, numPrototypes: int, maxTicks: int) -> None This method initializes the 'SeqClu' algorithm with a data source, distance measure, number of clusters and number of prototypes. Arguments : fakeDataSource : The fake data source that should be used in the 'SeqClu' algorithm. distanceMeasure : The distance measure that should be used in the 'SeqClu' algorithm. numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm. maxTicks : The maximum number of ticks that the algorithm is allowed to execute. Returns : void","title":"__init__"},{"location":"api-documentation/#execute_2","text":"| execute() -> None This method executes the 'SeqClu' algorithm from start to finish. The main loop over the data is implemented in here. Returns : void","title":"execute"},{"location":"api-documentation/#processsequence_2","text":"| processSequence(sequence: Tuple[str, ndarray], considerCandidacy: bool) -> None Since this algorithm is the offline variant of the algorithm, sequences are not processed one-by-one, but all at once in an iterative fashion. This method should never be called.","title":"processSequence"},{"location":"api-documentation/#seqclupvseqclubaselineonline","text":"This module contains a naive implementation of the online version of the 'SeqClu' algorithm that is used to compare the results of the developed variants of the 'SeqClu' algorithm to the results of the implementation contained in this module that serves as the baseline.","title":"seqclupv.SeqCluBaselineOnline"},{"location":"api-documentation/#seqclubaselineonline-objects","text":"class SeqCluBaselineOnline(ISeqClu)","title":"SeqCluBaselineOnline Objects"},{"location":"api-documentation/#finallabels_3","text":"| @property | finalLabels() -> Dict[str, Union[chr, int]] This property stores the correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels. Returns : The correct labels as a dictionary where the keys are the hashes of the sequences and the values are the correct labels.","title":"finalLabels"},{"location":"api-documentation/#__init___18","text":"| __init__(dataSource: FakeDataSource, distanceMeasure: IDistanceMeasure, numClusters: int, numPrototypes: int) -> None This method initializes the 'SeqClu' algorithm with a data source, distance measure, number of clusters and number of prototypes. Arguments : dataSource : The data source that should be used in the 'SeqClu' algorithm. distanceMeasure : The distance measure that should be used in the 'SeqClu' algorithm. numClusters : The number of clusters that should be used in the 'SeqClu' algorithm. numPrototypes : The number of prototypes that should be used in the 'SeqClu' algorithm. Returns : void","title":"__init__"},{"location":"api-documentation/#execute_3","text":"| execute() -> None This method executes the 'SeqClu' algorithm from start to finish. The main loop over the data is implemented in here. Returns : void","title":"execute"},{"location":"api-documentation/#processsequence_3","text":"| processSequence(sequence: Tuple[str, ndarray], considerCandidacy: bool) -> None This method processes one sequence of the data set that is processed in the 'SeqClu' algorithm. Arguments : sequence : The sequence that should be processed in the 'SeqClu' algorithm. considerCandidacy : A boolean value indicating whether or not the algorithm should consider if the sequence could be a prototype for any of the clusters. Returns : void","title":"processSequence"},{"location":"api-documentation/#seqclupv__main__","text":"This module contains a command-line interface that can be used to run experiments on the HPC cluster.","title":"seqclupv.__main__"},{"location":"api-documentation/#arecurveparameters","text":"areCurveParameters(parameters: list) -> bool This method verifies whether or not a list of parameters has the format of parameters that are used to generate a data set of sequences from a sine curve. Arguments : parameters : A list of parameters for which needs to be verified whether or not it has the format of parameters that are used to generate a data set of sequences from a sine curve. Returns : A boolean value indicating whether or not the given list of parameters has the format of parameters that are used to generate a data set of sequences from a sine curve.","title":"areCurveParameters"},{"location":"api-documentation/#arestringparameters","text":"areStringParameters(parameters: list) -> bool This method verifies whether or not all values in the list are strings. Arguments : parameters : A list of parameters for which needs to be verified whether or not all values in it are strings. Returns : A boolean value indicating whether or not all values in the given list of parameters are strings.","title":"areStringParameters"},{"location":"api-documentation/#areseqcluparameters","text":"areSeqCluParameters(parameters: list) -> bool This method verifies whether or not a list of parameters has the format of parameters that are used to configure the 'SeqClu-PV' algorithm. Arguments : parameters : A list of parameters for which needs to be verified whether or not it has the format of parameters that are used to configure the 'SeqClu-PV' algorithm. Returns : A boolean value indicating whether or not the given list of parameters has the format of parameters that are used to configure the 'SeqClu-PV' algorithm.","title":"areSeqCluParameters"},{"location":"api-documentation/#aretimeseriesclassificationparameters","text":"areTimeSeriesClassificationParameters(parameters: list) -> bool This method verifies whether or not a list of parameters has the format of parameters that are used to load a data set of sequences from data files downloaded from TimeSeriesClassification.com. Arguments : parameters : A list of parameters for which needs to be verified whether or not it has the format of parameters that are used to load a data set of sequences from data files downloaded from TimeSeriesClassification.com. Returns : A boolean value indicating whether or not the given list of parameters has the format of parameters that are used to load a data set of sequences from data files downloaded from TimeSeriesClassification.com.","title":"areTimeSeriesClassificationParameters"},{"location":"api-documentation/#parsebool","text":"parseBool(string: str) -> bool This method parses a string to a boolean. Arguments : string : The string that needs to be parsed to a boolean. Returns : The boolean equivalent of the passed string.","title":"parseBool"},{"location":"api-documentation/#main_1","text":"main(argv) -> None This method is the main method for the command-line interface of 'SeqClu-PV'. All arguments for the algorithm are passed via 'argv' and the algorithm is then configured and run. Arguments : argv : The parameters that are required to configure the algorithm. Returns : void","title":"main"}]}